<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="2145"><g><title>[[stack]] (6 samples, 0.28%)</title><rect x="0.0000%" y="645" width="0.2797%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>ioctl (6 samples, 0.28%)</title><rect x="0.0000%" y="629" width="0.2797%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.28%)</title><rect x="0.0000%" y="613" width="0.2797%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="0.2797%" y="613" width="0.0932%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="2"/><text x="0.5297%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.3263%" y="597" width="0.0466%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.5763%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.3263%" y="581" width="0.0466%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.5763%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.3263%" y="565" width="0.0466%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="0.5763%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.3263%" y="549" width="0.0466%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.5763%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.19%)</title><rect x="0.2797%" y="629" width="0.1865%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="4"/><text x="0.5297%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="0.3730%" y="613" width="0.0932%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="2"/><text x="0.6230%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4196%" y="597" width="0.0466%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="0.6696%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4196%" y="581" width="0.0466%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="1"/><text x="0.6696%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4196%" y="565" width="0.0466%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1"/><text x="0.6696%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.33%)</title><rect x="0.2797%" y="645" width="0.3263%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="7"/><text x="0.5297%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.14%)</title><rect x="0.4662%" y="629" width="0.1399%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="3"/><text x="0.7162%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="0.5128%" y="613" width="0.0932%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="2"/><text x="0.7628%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="0.5128%" y="597" width="0.0932%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="2"/><text x="0.7628%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.5594%" y="581" width="0.0466%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="1"/><text x="0.8094%" y="591.50"></text></g><g><title>[unknown] (25 samples, 1.17%)</title><rect x="0.6061%" y="645" width="1.1655%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="25"/><text x="0.8561%" y="655.50"></text></g><g><title>write (17 samples, 0.79%)</title><rect x="0.9790%" y="629" width="0.7925%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="17"/><text x="1.2290%" y="639.50"></text></g><g><title>[unknown] (17 samples, 0.79%)</title><rect x="0.9790%" y="613" width="0.7925%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="17"/><text x="1.2290%" y="623.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (82 samples, 3.82%)</title><rect x="4.5688%" y="325" width="3.8228%" height="15" fill="rgb(235,183,28)" fg:x="98" fg:w="82"/><text x="4.8188%" y="335.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (82 samples, 3.82%)</title><rect x="4.5688%" y="309" width="3.8228%" height="15" fill="rgb(221,5,38)" fg:x="98" fg:w="82"/><text x="4.8188%" y="319.50">&lt;std..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (82 samples, 3.82%)</title><rect x="4.5688%" y="293" width="3.8228%" height="15" fill="rgb(247,18,42)" fg:x="98" fg:w="82"/><text x="4.8188%" y="303.50">std:..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (82 samples, 3.82%)</title><rect x="4.5688%" y="277" width="3.8228%" height="15" fill="rgb(241,131,45)" fg:x="98" fg:w="82"/><text x="4.8188%" y="287.50">&lt;std..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (82 samples, 3.82%)</title><rect x="4.5688%" y="261" width="3.8228%" height="15" fill="rgb(249,31,29)" fg:x="98" fg:w="82"/><text x="4.8188%" y="271.50">&lt;std..</text></g><g><title>std::sys::unix::fd::FileDesc::write (82 samples, 3.82%)</title><rect x="4.5688%" y="245" width="3.8228%" height="15" fill="rgb(225,111,53)" fg:x="98" fg:w="82"/><text x="4.8188%" y="255.50">std:..</text></g><g><title>write (79 samples, 3.68%)</title><rect x="4.7086%" y="229" width="3.6830%" height="15" fill="rgb(238,160,17)" fg:x="101" fg:w="79"/><text x="4.9586%" y="239.50">write</text></g><g><title>[unknown] (79 samples, 3.68%)</title><rect x="4.7086%" y="213" width="3.6830%" height="15" fill="rgb(214,148,48)" fg:x="101" fg:w="79"/><text x="4.9586%" y="223.50">[unk..</text></g><g><title>[unknown] (78 samples, 3.64%)</title><rect x="4.7552%" y="197" width="3.6364%" height="15" fill="rgb(232,36,49)" fg:x="102" fg:w="78"/><text x="5.0052%" y="207.50">[unk..</text></g><g><title>[unknown] (76 samples, 3.54%)</title><rect x="4.8485%" y="181" width="3.5431%" height="15" fill="rgb(209,103,24)" fg:x="104" fg:w="76"/><text x="5.0985%" y="191.50">[unk..</text></g><g><title>[unknown] (69 samples, 3.22%)</title><rect x="5.1748%" y="165" width="3.2168%" height="15" fill="rgb(229,88,8)" fg:x="111" fg:w="69"/><text x="5.4248%" y="175.50">[un..</text></g><g><title>[unknown] (56 samples, 2.61%)</title><rect x="5.7809%" y="149" width="2.6107%" height="15" fill="rgb(213,181,19)" fg:x="124" fg:w="56"/><text x="6.0309%" y="159.50">[u..</text></g><g><title>[unknown] (41 samples, 1.91%)</title><rect x="6.4802%" y="133" width="1.9114%" height="15" fill="rgb(254,191,54)" fg:x="139" fg:w="41"/><text x="6.7302%" y="143.50">[..</text></g><g><title>[unknown] (4 samples, 0.19%)</title><rect x="8.2051%" y="117" width="0.1865%" height="15" fill="rgb(241,83,37)" fg:x="176" fg:w="4"/><text x="8.4551%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="8.3450%" y="101" width="0.0466%" height="15" fill="rgb(233,36,39)" fg:x="179" fg:w="1"/><text x="8.5950%" y="111.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (84 samples, 3.92%)</title><rect x="4.5688%" y="341" width="3.9161%" height="15" fill="rgb(226,3,54)" fg:x="98" fg:w="84"/><text x="4.8188%" y="351.50">&lt;std..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (2 samples, 0.09%)</title><rect x="8.3916%" y="325" width="0.0932%" height="15" fill="rgb(245,192,40)" fg:x="180" fg:w="2"/><text x="8.6416%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.09%)</title><rect x="8.3916%" y="309" width="0.0932%" height="15" fill="rgb(238,167,29)" fg:x="180" fg:w="2"/><text x="8.6416%" y="319.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="8.3916%" y="293" width="0.0932%" height="15" fill="rgb(232,182,51)" fg:x="180" fg:w="2"/><text x="8.6416%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.09%)</title><rect x="8.3916%" y="277" width="0.0932%" height="15" fill="rgb(231,60,39)" fg:x="180" fg:w="2"/><text x="8.6416%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.09%)</title><rect x="8.3916%" y="261" width="0.0932%" height="15" fill="rgb(208,69,12)" fg:x="180" fg:w="2"/><text x="8.6416%" y="271.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="8.3916%" y="245" width="0.0932%" height="15" fill="rgb(235,93,37)" fg:x="180" fg:w="2"/><text x="8.6416%" y="255.50"></text></g><g><title>core::ptr::write (2 samples, 0.09%)</title><rect x="8.3916%" y="229" width="0.0932%" height="15" fill="rgb(213,116,39)" fg:x="180" fg:w="2"/><text x="8.6416%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (4 samples, 0.19%)</title><rect x="8.4848%" y="341" width="0.1865%" height="15" fill="rgb(222,207,29)" fg:x="182" fg:w="4"/><text x="8.7348%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (4 samples, 0.19%)</title><rect x="8.4848%" y="325" width="0.1865%" height="15" fill="rgb(206,96,30)" fg:x="182" fg:w="4"/><text x="8.7348%" y="335.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.19%)</title><rect x="8.4848%" y="309" width="0.1865%" height="15" fill="rgb(218,138,4)" fg:x="182" fg:w="4"/><text x="8.7348%" y="319.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (4 samples, 0.19%)</title><rect x="8.4848%" y="293" width="0.1865%" height="15" fill="rgb(250,191,14)" fg:x="182" fg:w="4"/><text x="8.7348%" y="303.50"></text></g><g><title>pthread_mutex_unlock (4 samples, 0.19%)</title><rect x="8.4848%" y="277" width="0.1865%" height="15" fill="rgb(239,60,40)" fg:x="182" fg:w="4"/><text x="8.7348%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (89 samples, 4.15%)</title><rect x="4.5688%" y="373" width="4.1492%" height="15" fill="rgb(206,27,48)" fg:x="98" fg:w="89"/><text x="4.8188%" y="383.50">&lt;std:..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (89 samples, 4.15%)</title><rect x="4.5688%" y="357" width="4.1492%" height="15" fill="rgb(225,35,8)" fg:x="98" fg:w="89"/><text x="4.8188%" y="367.50">&lt;&amp;std..</text></g><g><title>std::io::stdio::Stdout::lock (1 samples, 0.05%)</title><rect x="8.6713%" y="341" width="0.0466%" height="15" fill="rgb(250,213,24)" fg:x="186" fg:w="1"/><text x="8.9213%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="22.9371%" y="357" width="0.0466%" height="15" fill="rgb(247,123,22)" fg:x="492" fg:w="1"/><text x="23.1871%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="22.9371%" y="341" width="0.0466%" height="15" fill="rgb(231,138,38)" fg:x="492" fg:w="1"/><text x="23.1871%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="22.9371%" y="325" width="0.0466%" height="15" fill="rgb(231,145,46)" fg:x="492" fg:w="1"/><text x="23.1871%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="22.9371%" y="309" width="0.0466%" height="15" fill="rgb(251,118,11)" fg:x="492" fg:w="1"/><text x="23.1871%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="22.9371%" y="293" width="0.0466%" height="15" fill="rgb(217,147,25)" fg:x="492" fg:w="1"/><text x="23.1871%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="22.9371%" y="277" width="0.0466%" height="15" fill="rgb(247,81,37)" fg:x="492" fg:w="1"/><text x="23.1871%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (68 samples, 3.17%)</title><rect x="30.7692%" y="309" width="3.1702%" height="15" fill="rgb(209,12,38)" fg:x="660" fg:w="68"/><text x="31.0192%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (68 samples, 3.17%)</title><rect x="30.7692%" y="293" width="3.1702%" height="15" fill="rgb(227,1,9)" fg:x="660" fg:w="68"/><text x="31.0192%" y="303.50">cor..</text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 3.17%)</title><rect x="30.7692%" y="277" width="3.1702%" height="15" fill="rgb(248,47,43)" fg:x="660" fg:w="68"/><text x="31.0192%" y="287.50">&lt;st..</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (68 samples, 3.17%)</title><rect x="30.7692%" y="261" width="3.1702%" height="15" fill="rgb(221,10,30)" fg:x="660" fg:w="68"/><text x="31.0192%" y="271.50">std..</text></g><g><title>pthread_mutex_unlock (67 samples, 3.12%)</title><rect x="30.8159%" y="245" width="3.1235%" height="15" fill="rgb(210,229,1)" fg:x="661" fg:w="67"/><text x="31.0659%" y="255.50">pth..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (129 samples, 6.01%)</title><rect x="40.6061%" y="277" width="6.0140%" height="15" fill="rgb(222,148,37)" fg:x="871" fg:w="129"/><text x="40.8561%" y="287.50">&lt;&amp;T as c..</text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="46.6200%" y="277" width="0.1399%" height="15" fill="rgb(234,67,33)" fg:x="1000" fg:w="3"/><text x="46.8700%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 2.52%)</title><rect x="46.7599%" y="277" width="2.5175%" height="15" fill="rgb(247,98,35)" fg:x="1003" fg:w="54"/><text x="47.0099%" y="287.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 2.52%)</title><rect x="46.7599%" y="261" width="2.5175%" height="15" fill="rgb(247,138,52)" fg:x="1003" fg:w="54"/><text x="47.0099%" y="271.50">&lt;c..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (41 samples, 1.91%)</title><rect x="52.8671%" y="213" width="1.9114%" height="15" fill="rgb(213,79,30)" fg:x="1134" fg:w="41"/><text x="53.1171%" y="223.50">&lt;..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (41 samples, 1.91%)</title><rect x="52.8671%" y="197" width="1.9114%" height="15" fill="rgb(246,177,23)" fg:x="1134" fg:w="41"/><text x="53.1171%" y="207.50">s..</text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 1.91%)</title><rect x="52.8671%" y="181" width="1.9114%" height="15" fill="rgb(230,62,27)" fg:x="1134" fg:w="41"/><text x="53.1171%" y="191.50">c..</text></g><g><title>[libc.so.6] (31 samples, 1.45%)</title><rect x="53.3333%" y="165" width="1.4452%" height="15" fill="rgb(216,154,8)" fg:x="1144" fg:w="31"/><text x="53.5833%" y="175.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (10 samples, 0.47%)</title><rect x="54.7786%" y="197" width="0.4662%" height="15" fill="rgb(244,35,45)" fg:x="1175" fg:w="10"/><text x="55.0286%" y="207.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (11 samples, 0.51%)</title><rect x="54.7786%" y="213" width="0.5128%" height="15" fill="rgb(251,115,12)" fg:x="1175" fg:w="11"/><text x="55.0286%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.05%)</title><rect x="55.2448%" y="197" width="0.0466%" height="15" fill="rgb(240,54,50)" fg:x="1185" fg:w="1"/><text x="55.4948%" y="207.50"></text></g><g><title>[libc.so.6] (77 samples, 3.59%)</title><rect x="55.8974%" y="165" width="3.5897%" height="15" fill="rgb(233,84,52)" fg:x="1199" fg:w="77"/><text x="56.1474%" y="175.50">[lib..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (143 samples, 6.67%)</title><rect x="52.8671%" y="245" width="6.6667%" height="15" fill="rgb(207,117,47)" fg:x="1134" fg:w="143"/><text x="53.1171%" y="255.50">&lt;std::io:..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (143 samples, 6.67%)</title><rect x="52.8671%" y="229" width="6.6667%" height="15" fill="rgb(249,43,39)" fg:x="1134" fg:w="143"/><text x="53.1171%" y="239.50">&lt;std::io:..</text></g><g><title>std::sys_common::memchr::memrchr (91 samples, 4.24%)</title><rect x="55.2914%" y="213" width="4.2424%" height="15" fill="rgb(209,38,44)" fg:x="1186" fg:w="91"/><text x="55.5414%" y="223.50">std::..</text></g><g><title>std::sys::unix::memchr::memrchr (91 samples, 4.24%)</title><rect x="55.2914%" y="197" width="4.2424%" height="15" fill="rgb(236,212,23)" fg:x="1186" fg:w="91"/><text x="55.5414%" y="207.50">std::..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (91 samples, 4.24%)</title><rect x="55.2914%" y="181" width="4.2424%" height="15" fill="rgb(242,79,21)" fg:x="1186" fg:w="91"/><text x="55.5414%" y="191.50">std::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.05%)</title><rect x="59.4872%" y="165" width="0.0466%" height="15" fill="rgb(211,96,35)" fg:x="1276" fg:w="1"/><text x="59.7372%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (233 samples, 10.86%)</title><rect x="49.2774%" y="277" width="10.8625%" height="15" fill="rgb(253,215,40)" fg:x="1057" fg:w="233"/><text x="49.5274%" y="287.50">&lt;std::io::Write:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (204 samples, 9.51%)</title><rect x="50.6294%" y="261" width="9.5105%" height="15" fill="rgb(211,81,21)" fg:x="1086" fg:w="204"/><text x="50.8794%" y="271.50">&lt;std::io::stdi..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (13 samples, 0.61%)</title><rect x="59.5338%" y="245" width="0.6061%" height="15" fill="rgb(208,190,38)" fg:x="1277" fg:w="13"/><text x="59.7838%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (13 samples, 0.61%)</title><rect x="59.5338%" y="229" width="0.6061%" height="15" fill="rgb(235,213,38)" fg:x="1277" fg:w="13"/><text x="59.7838%" y="239.50"></text></g><g><title>core::cell::BorrowRefMut::new (13 samples, 0.61%)</title><rect x="59.5338%" y="213" width="0.6061%" height="15" fill="rgb(237,122,38)" fg:x="1277" fg:w="13"/><text x="59.7838%" y="223.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="60.1399%" y="277" width="0.0466%" height="15" fill="rgb(244,218,35)" fg:x="1290" fg:w="1"/><text x="60.3899%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad (50 samples, 2.33%)</title><rect x="60.1865%" y="277" width="2.3310%" height="15" fill="rgb(240,68,47)" fg:x="1291" fg:w="50"/><text x="60.4365%" y="287.50">c..</text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="62.5641%" y="261" width="0.0466%" height="15" fill="rgb(210,16,53)" fg:x="1342" fg:w="1"/><text x="62.8141%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (2 samples, 0.09%)</title><rect x="62.7040%" y="245" width="0.0932%" height="15" fill="rgb(235,124,12)" fg:x="1345" fg:w="2"/><text x="62.9540%" y="255.50"></text></g><g><title>core::str::count::count_chars (2 samples, 0.09%)</title><rect x="62.7040%" y="229" width="0.0932%" height="15" fill="rgb(224,169,11)" fg:x="1345" fg:w="2"/><text x="62.9540%" y="239.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.05%)</title><rect x="62.7506%" y="213" width="0.0466%" height="15" fill="rgb(250,166,2)" fg:x="1346" fg:w="1"/><text x="63.0006%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.05%)</title><rect x="62.7506%" y="197" width="0.0466%" height="15" fill="rgb(242,216,29)" fg:x="1346" fg:w="1"/><text x="63.0006%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.05%)</title><rect x="62.7506%" y="181" width="0.0466%" height="15" fill="rgb(230,116,27)" fg:x="1346" fg:w="1"/><text x="63.0006%" y="191.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.05%)</title><rect x="62.7506%" y="165" width="0.0466%" height="15" fill="rgb(228,99,48)" fg:x="1346" fg:w="1"/><text x="63.0006%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.05%)</title><rect x="62.7506%" y="149" width="0.0466%" height="15" fill="rgb(253,11,6)" fg:x="1346" fg:w="1"/><text x="63.0006%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.05%)</title><rect x="62.7506%" y="133" width="0.0466%" height="15" fill="rgb(247,143,39)" fg:x="1346" fg:w="1"/><text x="63.0006%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="62.7506%" y="117" width="0.0466%" height="15" fill="rgb(236,97,10)" fg:x="1346" fg:w="1"/><text x="63.0006%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.09%)</title><rect x="62.7972%" y="245" width="0.0932%" height="15" fill="rgb(233,208,19)" fg:x="1347" fg:w="2"/><text x="63.0472%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="62.8438%" y="229" width="0.0466%" height="15" fill="rgb(216,164,2)" fg:x="1348" fg:w="1"/><text x="63.0938%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="62.8438%" y="213" width="0.0466%" height="15" fill="rgb(220,129,5)" fg:x="1348" fg:w="1"/><text x="63.0938%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="62.8438%" y="197" width="0.0466%" height="15" fill="rgb(242,17,10)" fg:x="1348" fg:w="1"/><text x="63.0938%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="62.8438%" y="181" width="0.0466%" height="15" fill="rgb(242,107,0)" fg:x="1348" fg:w="1"/><text x="63.0938%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="62.8438%" y="165" width="0.0466%" height="15" fill="rgb(251,28,31)" fg:x="1348" fg:w="1"/><text x="63.0938%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="62.8438%" y="149" width="0.0466%" height="15" fill="rgb(233,223,10)" fg:x="1348" fg:w="1"/><text x="63.0938%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="62.8438%" y="133" width="0.0466%" height="15" fill="rgb(215,21,27)" fg:x="1348" fg:w="1"/><text x="63.0938%" y="143.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (34 samples, 1.59%)</title><rect x="65.3147%" y="149" width="1.5851%" height="15" fill="rgb(232,23,21)" fg:x="1401" fg:w="34"/><text x="65.5647%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (34 samples, 1.59%)</title><rect x="65.3147%" y="133" width="1.5851%" height="15" fill="rgb(244,5,23)" fg:x="1401" fg:w="34"/><text x="65.5647%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 1.59%)</title><rect x="65.3147%" y="117" width="1.5851%" height="15" fill="rgb(226,81,46)" fg:x="1401" fg:w="34"/><text x="65.5647%" y="127.50"></text></g><g><title>[libc.so.6] (21 samples, 0.98%)</title><rect x="65.9207%" y="101" width="0.9790%" height="15" fill="rgb(247,70,30)" fg:x="1414" fg:w="21"/><text x="66.1707%" y="111.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (4 samples, 0.19%)</title><rect x="66.8998%" y="149" width="0.1865%" height="15" fill="rgb(212,68,19)" fg:x="1435" fg:w="4"/><text x="67.1498%" y="159.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (4 samples, 0.19%)</title><rect x="66.8998%" y="133" width="0.1865%" height="15" fill="rgb(240,187,13)" fg:x="1435" fg:w="4"/><text x="67.1498%" y="143.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (197 samples, 9.18%)</title><rect x="65.3147%" y="181" width="9.1841%" height="15" fill="rgb(223,113,26)" fg:x="1401" fg:w="197"/><text x="65.5647%" y="191.50">&lt;std::io::buf..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (197 samples, 9.18%)</title><rect x="65.3147%" y="165" width="9.1841%" height="15" fill="rgb(206,192,2)" fg:x="1401" fg:w="197"/><text x="65.5647%" y="175.50">&lt;std::io::buf..</text></g><g><title>std::sys_common::memchr::memrchr (159 samples, 7.41%)</title><rect x="67.0862%" y="149" width="7.4126%" height="15" fill="rgb(241,108,4)" fg:x="1439" fg:w="159"/><text x="67.3362%" y="159.50">std::sys_c..</text></g><g><title>std::sys::unix::memchr::memrchr (159 samples, 7.41%)</title><rect x="67.0862%" y="133" width="7.4126%" height="15" fill="rgb(247,173,49)" fg:x="1439" fg:w="159"/><text x="67.3362%" y="143.50">std::sys::..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (159 samples, 7.41%)</title><rect x="67.0862%" y="117" width="7.4126%" height="15" fill="rgb(224,114,35)" fg:x="1439" fg:w="159"/><text x="67.3362%" y="127.50">std::sys::..</text></g><g><title>[libc.so.6] (147 samples, 6.85%)</title><rect x="67.6457%" y="101" width="6.8531%" height="15" fill="rgb(245,159,27)" fg:x="1451" fg:w="147"/><text x="67.8957%" y="111.50">[libc.so...</text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="74.4522%" y="85" width="0.0466%" height="15" fill="rgb(245,172,44)" fg:x="1597" fg:w="1"/><text x="74.7022%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="74.4522%" y="69" width="0.0466%" height="15" fill="rgb(236,23,11)" fg:x="1597" fg:w="1"/><text x="74.7022%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="74.4522%" y="53" width="0.0466%" height="15" fill="rgb(205,117,38)" fg:x="1597" fg:w="1"/><text x="74.7022%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="74.4522%" y="37" width="0.0466%" height="15" fill="rgb(237,72,25)" fg:x="1597" fg:w="1"/><text x="74.7022%" y="47.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (235 samples, 10.96%)</title><rect x="63.7762%" y="213" width="10.9557%" height="15" fill="rgb(244,70,9)" fg:x="1368" fg:w="235"/><text x="64.0262%" y="223.50">&lt;std::io::Write:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (234 samples, 10.91%)</title><rect x="63.8228%" y="197" width="10.9091%" height="15" fill="rgb(217,125,39)" fg:x="1369" fg:w="234"/><text x="64.0728%" y="207.50">&lt;std::io::stdio:..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.23%)</title><rect x="74.4988%" y="181" width="0.2331%" height="15" fill="rgb(235,36,10)" fg:x="1598" fg:w="5"/><text x="74.7488%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.23%)</title><rect x="74.4988%" y="165" width="0.2331%" height="15" fill="rgb(251,123,47)" fg:x="1598" fg:w="5"/><text x="74.7488%" y="175.50"></text></g><g><title>core::cell::BorrowRefMut::new (5 samples, 0.23%)</title><rect x="74.4988%" y="149" width="0.2331%" height="15" fill="rgb(221,13,13)" fg:x="1598" fg:w="5"/><text x="74.7488%" y="159.50"></text></g><g><title>core::fmt::Write::write_char (260 samples, 12.12%)</title><rect x="62.9371%" y="229" width="12.1212%" height="15" fill="rgb(238,131,9)" fg:x="1350" fg:w="260"/><text x="63.1871%" y="239.50">core::fmt::Write::..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (7 samples, 0.33%)</title><rect x="74.7319%" y="213" width="0.3263%" height="15" fill="rgb(211,50,8)" fg:x="1603" fg:w="7"/><text x="74.9819%" y="223.50"></text></g><g><title>core::char::methods::encode_utf8_raw (7 samples, 0.33%)</title><rect x="74.7319%" y="197" width="0.3263%" height="15" fill="rgb(245,182,24)" fg:x="1603" fg:w="7"/><text x="74.9819%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad (271 samples, 12.63%)</title><rect x="62.6107%" y="261" width="12.6340%" height="15" fill="rgb(242,14,37)" fg:x="1343" fg:w="271"/><text x="62.8607%" y="271.50">core::fmt::Formatte..</text></g><g><title>core::fmt::PostPadding::write (265 samples, 12.35%)</title><rect x="62.8904%" y="245" width="12.3543%" height="15" fill="rgb(246,228,12)" fg:x="1349" fg:w="265"/><text x="63.1404%" y="255.50">core::fmt::PostPad..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.19%)</title><rect x="75.0583%" y="229" width="0.1865%" height="15" fill="rgb(213,55,15)" fg:x="1610" fg:w="4"/><text x="75.3083%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.19%)</title><rect x="75.0583%" y="213" width="0.1865%" height="15" fill="rgb(209,9,3)" fg:x="1610" fg:w="4"/><text x="75.3083%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.19%)</title><rect x="75.0583%" y="197" width="0.1865%" height="15" fill="rgb(230,59,30)" fg:x="1610" fg:w="4"/><text x="75.3083%" y="207.50"></text></g><g><title>core::fmt::getcount (1 samples, 0.05%)</title><rect x="75.2448%" y="261" width="0.0466%" height="15" fill="rgb(209,121,21)" fg:x="1614" fg:w="1"/><text x="75.4948%" y="271.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.23%)</title><rect x="75.7576%" y="213" width="0.2331%" height="15" fill="rgb(220,109,13)" fg:x="1625" fg:w="5"/><text x="76.0076%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.19%)</title><rect x="75.8042%" y="197" width="0.1865%" height="15" fill="rgb(232,18,1)" fg:x="1626" fg:w="4"/><text x="76.0542%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.14%)</title><rect x="75.8508%" y="181" width="0.1399%" height="15" fill="rgb(215,41,42)" fg:x="1627" fg:w="3"/><text x="76.1008%" y="191.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.14%)</title><rect x="75.8508%" y="165" width="0.1399%" height="15" fill="rgb(224,123,36)" fg:x="1627" fg:w="3"/><text x="76.1008%" y="175.50"></text></g><g><title>std::sys_common::memchr::memrchr (3 samples, 0.14%)</title><rect x="75.8508%" y="149" width="0.1399%" height="15" fill="rgb(240,125,3)" fg:x="1627" fg:w="3"/><text x="76.1008%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (3 samples, 0.14%)</title><rect x="75.8508%" y="133" width="0.1399%" height="15" fill="rgb(205,98,50)" fg:x="1627" fg:w="3"/><text x="76.1008%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (3 samples, 0.14%)</title><rect x="75.8508%" y="117" width="0.1399%" height="15" fill="rgb(205,185,37)" fg:x="1627" fg:w="3"/><text x="76.1008%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="75.8508%" y="101" width="0.1399%" height="15" fill="rgb(238,207,15)" fg:x="1627" fg:w="3"/><text x="76.1008%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.05%)</title><rect x="75.9907%" y="213" width="0.0466%" height="15" fill="rgb(213,199,42)" fg:x="1630" fg:w="1"/><text x="76.2407%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.05%)</title><rect x="76.3170%" y="117" width="0.0466%" height="15" fill="rgb(235,201,11)" fg:x="1637" fg:w="1"/><text x="76.5670%" y="127.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (1 samples, 0.05%)</title><rect x="76.3170%" y="101" width="0.0466%" height="15" fill="rgb(207,46,11)" fg:x="1637" fg:w="1"/><text x="76.5670%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="76.3170%" y="85" width="0.0466%" height="15" fill="rgb(241,35,35)" fg:x="1637" fg:w="1"/><text x="76.5670%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="76.3170%" y="69" width="0.0466%" height="15" fill="rgb(243,32,47)" fg:x="1637" fg:w="1"/><text x="76.5670%" y="79.50"></text></g><g><title>core::fmt::run (316 samples, 14.73%)</title><rect x="62.5175%" y="277" width="14.7319%" height="15" fill="rgb(247,202,23)" fg:x="1341" fg:w="316"/><text x="62.7675%" y="287.50">core::fmt::run</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (42 samples, 1.96%)</title><rect x="75.2914%" y="261" width="1.9580%" height="15" fill="rgb(219,102,11)" fg:x="1615" fg:w="42"/><text x="75.5414%" y="271.50">c..</text></g><g><title>core::fmt::num::imp::fmt_u64 (38 samples, 1.77%)</title><rect x="75.4779%" y="245" width="1.7716%" height="15" fill="rgb(243,110,44)" fg:x="1619" fg:w="38"/><text x="75.7279%" y="255.50">c..</text></g><g><title>core::fmt::Formatter::pad_integral (37 samples, 1.72%)</title><rect x="75.5245%" y="229" width="1.7249%" height="15" fill="rgb(222,74,54)" fg:x="1620" fg:w="37"/><text x="75.7745%" y="239.50"></text></g><g><title>core::fmt::Formatter::padding (26 samples, 1.21%)</title><rect x="76.0373%" y="213" width="1.2121%" height="15" fill="rgb(216,99,12)" fg:x="1631" fg:w="26"/><text x="76.2873%" y="223.50"></text></g><g><title>core::fmt::Write::write_char (26 samples, 1.21%)</title><rect x="76.0373%" y="197" width="1.2121%" height="15" fill="rgb(226,22,26)" fg:x="1631" fg:w="26"/><text x="76.2873%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (24 samples, 1.12%)</title><rect x="76.1305%" y="181" width="1.1189%" height="15" fill="rgb(217,163,10)" fg:x="1633" fg:w="24"/><text x="76.3805%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (24 samples, 1.12%)</title><rect x="76.1305%" y="165" width="1.1189%" height="15" fill="rgb(213,25,53)" fg:x="1633" fg:w="24"/><text x="76.3805%" y="175.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.93%)</title><rect x="76.3170%" y="149" width="0.9324%" height="15" fill="rgb(252,105,26)" fg:x="1637" fg:w="20"/><text x="76.5670%" y="159.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.93%)</title><rect x="76.3170%" y="133" width="0.9324%" height="15" fill="rgb(220,39,43)" fg:x="1637" fg:w="20"/><text x="76.5670%" y="143.50"></text></g><g><title>std::sys_common::memchr::memrchr (19 samples, 0.89%)</title><rect x="76.3636%" y="117" width="0.8858%" height="15" fill="rgb(229,68,48)" fg:x="1638" fg:w="19"/><text x="76.6136%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr (19 samples, 0.89%)</title><rect x="76.3636%" y="101" width="0.8858%" height="15" fill="rgb(252,8,32)" fg:x="1638" fg:w="19"/><text x="76.6136%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (19 samples, 0.89%)</title><rect x="76.3636%" y="85" width="0.8858%" height="15" fill="rgb(223,20,43)" fg:x="1638" fg:w="19"/><text x="76.6136%" y="95.50"></text></g><g><title>[libc.so.6] (18 samples, 0.84%)</title><rect x="76.4103%" y="69" width="0.8392%" height="15" fill="rgb(229,81,49)" fg:x="1639" fg:w="18"/><text x="76.6603%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (11 samples, 0.51%)</title><rect x="77.2494%" y="277" width="0.5128%" height="15" fill="rgb(236,28,36)" fg:x="1657" fg:w="11"/><text x="77.4994%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (11 samples, 0.51%)</title><rect x="77.2494%" y="261" width="0.5128%" height="15" fill="rgb(249,185,26)" fg:x="1657" fg:w="11"/><text x="77.4994%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (949 samples, 44.24%)</title><rect x="33.9394%" y="309" width="44.2424%" height="15" fill="rgb(249,174,33)" fg:x="728" fg:w="949"/><text x="34.1894%" y="319.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (923 samples, 43.03%)</title><rect x="35.1515%" y="293" width="43.0303%" height="15" fill="rgb(233,201,37)" fg:x="754" fg:w="923"/><text x="35.4015%" y="303.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (9 samples, 0.42%)</title><rect x="77.7622%" y="277" width="0.4196%" height="15" fill="rgb(221,78,26)" fg:x="1668" fg:w="9"/><text x="78.0122%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,275 samples, 59.44%)</title><rect x="23.4499%" y="341" width="59.4406%" height="15" fill="rgb(250,127,30)" fg:x="503" fg:w="1275"/><text x="23.6999%" y="351.50">&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,183 samples, 55.15%)</title><rect x="27.7389%" y="325" width="55.1515%" height="15" fill="rgb(230,49,44)" fg:x="595" fg:w="1183"/><text x="27.9889%" y="335.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>std::io::stdio::Stdout::lock (101 samples, 4.71%)</title><rect x="78.1818%" y="309" width="4.7086%" height="15" fill="rgb(229,67,23)" fg:x="1677" fg:w="101"/><text x="78.4318%" y="319.50">std::..</text></g><g><title>std::io::stdio::Stdout::lock_any (101 samples, 4.71%)</title><rect x="78.1818%" y="293" width="4.7086%" height="15" fill="rgb(249,83,47)" fg:x="1677" fg:w="101"/><text x="78.4318%" y="303.50">std::..</text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (101 samples, 4.71%)</title><rect x="78.1818%" y="277" width="4.7086%" height="15" fill="rgb(215,43,3)" fg:x="1677" fg:w="101"/><text x="78.4318%" y="287.50">std::..</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (101 samples, 4.71%)</title><rect x="78.1818%" y="261" width="4.7086%" height="15" fill="rgb(238,154,13)" fg:x="1677" fg:w="101"/><text x="78.4318%" y="271.50">std::..</text></g><g><title>pthread_mutex_lock (101 samples, 4.71%)</title><rect x="78.1818%" y="245" width="4.7086%" height="15" fill="rgb(219,56,2)" fg:x="1677" fg:w="101"/><text x="78.4318%" y="255.50">pthre..</text></g><g><title>std::io::stdio::_print (1,602 samples, 74.69%)</title><rect x="8.7179%" y="373" width="74.6853%" height="15" fill="rgb(233,0,4)" fg:x="187" fg:w="1602"/><text x="8.9679%" y="383.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (1,296 samples, 60.42%)</title><rect x="22.9837%" y="357" width="60.4196%" height="15" fill="rgb(235,30,7)" fg:x="493" fg:w="1296"/><text x="23.2337%" y="367.50">std::io::stdio::print_to</text></g><g><title>std::io::stdio::stdout (11 samples, 0.51%)</title><rect x="82.8904%" y="341" width="0.5128%" height="15" fill="rgb(250,79,13)" fg:x="1778" fg:w="11"/><text x="83.1404%" y="351.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init_pin (11 samples, 0.51%)</title><rect x="82.8904%" y="325" width="0.5128%" height="15" fill="rgb(211,146,34)" fg:x="1778" fg:w="11"/><text x="83.1404%" y="335.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get (11 samples, 0.51%)</title><rect x="82.8904%" y="309" width="0.5128%" height="15" fill="rgb(228,22,38)" fg:x="1778" fg:w="11"/><text x="83.1404%" y="319.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::is_initialized (11 samples, 0.51%)</title><rect x="82.8904%" y="293" width="0.5128%" height="15" fill="rgb(235,168,5)" fg:x="1778" fg:w="11"/><text x="83.1404%" y="303.50"></text></g><g><title>std::sync::once::Once::is_completed (11 samples, 0.51%)</title><rect x="82.8904%" y="277" width="0.5128%" height="15" fill="rgb(221,155,16)" fg:x="1778" fg:w="11"/><text x="83.1404%" y="287.50"></text></g><g><title>ioctl (1 samples, 0.05%)</title><rect x="83.4033%" y="357" width="0.0466%" height="15" fill="rgb(215,215,53)" fg:x="1789" fg:w="1"/><text x="83.6533%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.4033%" y="341" width="0.0466%" height="15" fill="rgb(223,4,10)" fg:x="1789" fg:w="1"/><text x="83.6533%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.4033%" y="325" width="0.0466%" height="15" fill="rgb(234,103,6)" fg:x="1789" fg:w="1"/><text x="83.6533%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.4033%" y="309" width="0.0466%" height="15" fill="rgb(227,97,0)" fg:x="1789" fg:w="1"/><text x="83.6533%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.4033%" y="293" width="0.0466%" height="15" fill="rgb(234,150,53)" fg:x="1789" fg:w="1"/><text x="83.6533%" y="303.50"></text></g><g><title>progress::Bar::_show_progress (1,745 samples, 81.35%)</title><rect x="2.2378%" y="389" width="81.3520%" height="15" fill="rgb(228,201,54)" fg:x="48" fg:w="1745"/><text x="2.4878%" y="399.50">progress::Bar::_show_progress</text></g><g><title>terminal_size::unix::terminal_size (4 samples, 0.19%)</title><rect x="83.4033%" y="373" width="0.1865%" height="15" fill="rgb(222,22,37)" fg:x="1789" fg:w="4"/><text x="83.6533%" y="383.50"></text></g><g><title>isatty (3 samples, 0.14%)</title><rect x="83.4499%" y="357" width="0.1399%" height="15" fill="rgb(237,53,32)" fg:x="1790" fg:w="3"/><text x="83.6999%" y="367.50"></text></g><g><title>tcgetattr (2 samples, 0.09%)</title><rect x="83.4965%" y="341" width="0.0932%" height="15" fill="rgb(233,25,53)" fg:x="1791" fg:w="2"/><text x="83.7465%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.5431%" y="325" width="0.0466%" height="15" fill="rgb(210,40,34)" fg:x="1792" fg:w="1"/><text x="83.7931%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.5431%" y="309" width="0.0466%" height="15" fill="rgb(241,220,44)" fg:x="1792" fg:w="1"/><text x="83.7931%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.5431%" y="293" width="0.0466%" height="15" fill="rgb(235,28,35)" fg:x="1792" fg:w="1"/><text x="83.7931%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="83.5431%" y="277" width="0.0466%" height="15" fill="rgb(210,56,17)" fg:x="1792" fg:w="1"/><text x="83.7931%" y="287.50"></text></g><g><title>ray_trace::render::ray_color (17 samples, 0.79%)</title><rect x="83.5897%" y="389" width="0.7925%" height="15" fill="rgb(224,130,29)" fg:x="1793" fg:w="17"/><text x="83.8397%" y="399.50"></text></g><g><title>__rust_dealloc (1 samples, 0.05%)</title><rect x="84.8951%" y="373" width="0.0466%" height="15" fill="rgb(235,212,8)" fg:x="1821" fg:w="1"/><text x="85.1451%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.19%)</title><rect x="85.3147%" y="325" width="0.1865%" height="15" fill="rgb(223,33,50)" fg:x="1830" fg:w="4"/><text x="85.5647%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.09%)</title><rect x="85.4079%" y="309" width="0.0932%" height="15" fill="rgb(219,149,13)" fg:x="1832" fg:w="2"/><text x="85.6579%" y="319.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.09%)</title><rect x="85.4079%" y="293" width="0.0932%" height="15" fill="rgb(250,156,29)" fg:x="1832" fg:w="2"/><text x="85.6579%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.09%)</title><rect x="85.4079%" y="277" width="0.0932%" height="15" fill="rgb(216,193,19)" fg:x="1832" fg:w="2"/><text x="85.6579%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.09%)</title><rect x="85.4079%" y="261" width="0.0932%" height="15" fill="rgb(216,135,14)" fg:x="1832" fg:w="2"/><text x="85.6579%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.09%)</title><rect x="85.4079%" y="245" width="0.0932%" height="15" fill="rgb(241,47,5)" fg:x="1832" fg:w="2"/><text x="85.6579%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="85.4079%" y="229" width="0.0932%" height="15" fill="rgb(233,42,35)" fg:x="1832" fg:w="2"/><text x="85.6579%" y="239.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="85.4079%" y="213" width="0.0932%" height="15" fill="rgb(231,13,6)" fg:x="1832" fg:w="2"/><text x="85.6579%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="85.5012%" y="325" width="0.0932%" height="15" fill="rgb(207,181,40)" fg:x="1834" fg:w="2"/><text x="85.7512%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="85.5012%" y="309" width="0.0932%" height="15" fill="rgb(254,173,49)" fg:x="1834" fg:w="2"/><text x="85.7512%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="85.9207%" y="133" width="0.0932%" height="15" fill="rgb(221,1,38)" fg:x="1843" fg:w="2"/><text x="86.1707%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.23%)</title><rect x="86.0606%" y="117" width="0.2331%" height="15" fill="rgb(206,124,46)" fg:x="1846" fg:w="5"/><text x="86.3106%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.23%)</title><rect x="86.0606%" y="101" width="0.2331%" height="15" fill="rgb(249,21,11)" fg:x="1846" fg:w="5"/><text x="86.3106%" y="111.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.23%)</title><rect x="86.0606%" y="85" width="0.2331%" height="15" fill="rgb(222,201,40)" fg:x="1846" fg:w="5"/><text x="86.3106%" y="95.50"></text></g><g><title>realloc (5 samples, 0.23%)</title><rect x="86.0606%" y="69" width="0.2331%" height="15" fill="rgb(235,61,29)" fg:x="1846" fg:w="5"/><text x="86.3106%" y="79.50"></text></g><g><title>[libc.so.6] (3 samples, 0.14%)</title><rect x="86.1538%" y="53" width="0.1399%" height="15" fill="rgb(219,207,3)" fg:x="1848" fg:w="3"/><text x="86.4038%" y="63.50"></text></g><g><title>__rdl_alloc (1 samples, 0.05%)</title><rect x="86.2937%" y="117" width="0.0466%" height="15" fill="rgb(222,56,46)" fg:x="1851" fg:w="1"/><text x="86.5437%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.37%)</title><rect x="86.0140%" y="133" width="0.3730%" height="15" fill="rgb(239,76,54)" fg:x="1845" fg:w="8"/><text x="86.2640%" y="143.50"></text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="86.3403%" y="117" width="0.0466%" height="15" fill="rgb(231,124,27)" fg:x="1852" fg:w="1"/><text x="86.5903%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13 samples, 0.61%)</title><rect x="85.9207%" y="197" width="0.6061%" height="15" fill="rgb(249,195,6)" fg:x="1843" fg:w="13"/><text x="86.1707%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.61%)</title><rect x="85.9207%" y="181" width="0.6061%" height="15" fill="rgb(237,174,47)" fg:x="1843" fg:w="13"/><text x="86.1707%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.61%)</title><rect x="85.9207%" y="165" width="0.6061%" height="15" fill="rgb(206,201,31)" fg:x="1843" fg:w="13"/><text x="86.1707%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.61%)</title><rect x="85.9207%" y="149" width="0.6061%" height="15" fill="rgb(231,57,52)" fg:x="1843" fg:w="13"/><text x="86.1707%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.14%)</title><rect x="86.3869%" y="133" width="0.1399%" height="15" fill="rgb(248,177,22)" fg:x="1853" fg:w="3"/><text x="86.6369%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.14%)</title><rect x="86.3869%" y="117" width="0.1399%" height="15" fill="rgb(215,211,37)" fg:x="1853" fg:w="3"/><text x="86.6369%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.14%)</title><rect x="86.5268%" y="197" width="0.1399%" height="15" fill="rgb(241,128,51)" fg:x="1856" fg:w="3"/><text x="86.7768%" y="207.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (21 samples, 0.98%)</title><rect x="85.7809%" y="293" width="0.9790%" height="15" fill="rgb(227,165,31)" fg:x="1840" fg:w="21"/><text x="86.0309%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (20 samples, 0.93%)</title><rect x="85.8275%" y="277" width="0.9324%" height="15" fill="rgb(228,167,24)" fg:x="1841" fg:w="20"/><text x="86.0775%" y="287.50"></text></g><g><title>alloc::string::String::push_str (20 samples, 0.93%)</title><rect x="85.8275%" y="261" width="0.9324%" height="15" fill="rgb(228,143,12)" fg:x="1841" fg:w="20"/><text x="86.0775%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (20 samples, 0.93%)</title><rect x="85.8275%" y="245" width="0.9324%" height="15" fill="rgb(249,149,8)" fg:x="1841" fg:w="20"/><text x="86.0775%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (20 samples, 0.93%)</title><rect x="85.8275%" y="229" width="0.9324%" height="15" fill="rgb(243,35,44)" fg:x="1841" fg:w="20"/><text x="86.0775%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (20 samples, 0.93%)</title><rect x="85.8275%" y="213" width="0.9324%" height="15" fill="rgb(246,89,9)" fg:x="1841" fg:w="20"/><text x="86.0775%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.09%)</title><rect x="86.6667%" y="197" width="0.0932%" height="15" fill="rgb(233,213,13)" fg:x="1859" fg:w="2"/><text x="86.9167%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.09%)</title><rect x="86.6667%" y="181" width="0.0932%" height="15" fill="rgb(233,141,41)" fg:x="1859" fg:w="2"/><text x="86.9167%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad_integral (5 samples, 0.23%)</title><rect x="86.7599%" y="293" width="0.2331%" height="15" fill="rgb(239,167,4)" fg:x="1861" fg:w="5"/><text x="87.0099%" y="303.50"></text></g><g><title>core::fmt::Formatter::sign_plus (2 samples, 0.09%)</title><rect x="86.8998%" y="277" width="0.0932%" height="15" fill="rgb(209,217,16)" fg:x="1864" fg:w="2"/><text x="87.1498%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (35 samples, 1.63%)</title><rect x="85.5944%" y="325" width="1.6317%" height="15" fill="rgb(219,88,35)" fg:x="1836" fg:w="35"/><text x="85.8444%" y="335.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (33 samples, 1.54%)</title><rect x="85.6876%" y="309" width="1.5385%" height="15" fill="rgb(220,193,23)" fg:x="1838" fg:w="33"/><text x="85.9376%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.23%)</title><rect x="86.9930%" y="293" width="0.2331%" height="15" fill="rgb(230,90,52)" fg:x="1866" fg:w="5"/><text x="87.2430%" y="303.50"></text></g><g><title>alloc::fmt::format (50 samples, 2.33%)</title><rect x="84.9417%" y="373" width="2.3310%" height="15" fill="rgb(252,106,19)" fg:x="1822" fg:w="50"/><text x="85.1917%" y="383.50">a..</text></g><g><title>core::fmt::Write::write_fmt (48 samples, 2.24%)</title><rect x="85.0350%" y="357" width="2.2378%" height="15" fill="rgb(206,74,20)" fg:x="1824" fg:w="48"/><text x="85.2850%" y="367.50">c..</text></g><g><title>core::fmt::write (45 samples, 2.10%)</title><rect x="85.1748%" y="341" width="2.0979%" height="15" fill="rgb(230,138,44)" fg:x="1827" fg:w="45"/><text x="85.4248%" y="351.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.05%)</title><rect x="87.2261%" y="325" width="0.0466%" height="15" fill="rgb(235,182,43)" fg:x="1871" fg:w="1"/><text x="87.4761%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.05%)</title><rect x="87.2261%" y="309" width="0.0466%" height="15" fill="rgb(242,16,51)" fg:x="1871" fg:w="1"/><text x="87.4761%" y="319.50"></text></g><g><title>roundf64 (4 samples, 0.19%)</title><rect x="87.2727%" y="373" width="0.1865%" height="15" fill="rgb(248,9,4)" fg:x="1872" fg:w="4"/><text x="87.5227%" y="383.50"></text></g><g><title>all (2,145 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="2145"/><text x="0.2500%" y="687.50"></text></g><g><title>ray-trace (2,145 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="2145"/><text x="0.2500%" y="671.50">ray-trace</text></g><g><title>_start (2,107 samples, 98.23%)</title><rect x="1.7716%" y="645" width="98.2284%" height="15" fill="rgb(230,99,41)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="655.50">_start</text></g><g><title>__libc_start_main (2,107 samples, 98.23%)</title><rect x="1.7716%" y="629" width="98.2284%" height="15" fill="rgb(253,106,12)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="639.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,107 samples, 98.23%)</title><rect x="1.7716%" y="613" width="98.2284%" height="15" fill="rgb(213,46,41)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="623.50">[libc.so.6]</text></g><g><title>main (2,107 samples, 98.23%)</title><rect x="1.7716%" y="597" width="98.2284%" height="15" fill="rgb(215,133,35)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (2,107 samples, 98.23%)</title><rect x="1.7716%" y="581" width="98.2284%" height="15" fill="rgb(213,28,5)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,107 samples, 98.23%)</title><rect x="1.7716%" y="565" width="98.2284%" height="15" fill="rgb(215,77,49)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,107 samples, 98.23%)</title><rect x="1.7716%" y="549" width="98.2284%" height="15" fill="rgb(248,100,22)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,107 samples, 98.23%)</title><rect x="1.7716%" y="533" width="98.2284%" height="15" fill="rgb(208,67,9)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,107 samples, 98.23%)</title><rect x="1.7716%" y="517" width="98.2284%" height="15" fill="rgb(219,133,21)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,107 samples, 98.23%)</title><rect x="1.7716%" y="501" width="98.2284%" height="15" fill="rgb(246,46,29)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,107 samples, 98.23%)</title><rect x="1.7716%" y="485" width="98.2284%" height="15" fill="rgb(246,185,52)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,107 samples, 98.23%)</title><rect x="1.7716%" y="469" width="98.2284%" height="15" fill="rgb(252,136,11)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,107 samples, 98.23%)</title><rect x="1.7716%" y="453" width="98.2284%" height="15" fill="rgb(219,138,53)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,107 samples, 98.23%)</title><rect x="1.7716%" y="437" width="98.2284%" height="15" fill="rgb(211,51,23)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,107 samples, 98.23%)</title><rect x="1.7716%" y="421" width="98.2284%" height="15" fill="rgb(247,221,28)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ray_trace::main (2,107 samples, 98.23%)</title><rect x="1.7716%" y="405" width="98.2284%" height="15" fill="rgb(251,222,45)" fg:x="38" fg:w="2107"/><text x="2.0216%" y="415.50">ray_trace::main</text></g><g><title>ray_trace::render::write_color (335 samples, 15.62%)</title><rect x="84.3823%" y="389" width="15.6177%" height="15" fill="rgb(217,162,53)" fg:x="1810" fg:w="335"/><text x="84.6323%" y="399.50">ray_trace::render::write..</text></g><g><title>std::io::Write::write_all (269 samples, 12.54%)</title><rect x="87.4592%" y="373" width="12.5408%" height="15" fill="rgb(229,93,14)" fg:x="1876" fg:w="269"/><text x="87.7092%" y="383.50">std::io::Write::wri..</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (269 samples, 12.54%)</title><rect x="87.4592%" y="357" width="12.5408%" height="15" fill="rgb(209,67,49)" fg:x="1876" fg:w="269"/><text x="87.7092%" y="367.50">std::os::unix::net:..</text></g><g><title>std::sys::unix::net::Socket::write (260 samples, 12.12%)</title><rect x="87.8788%" y="341" width="12.1212%" height="15" fill="rgb(213,87,29)" fg:x="1885" fg:w="260"/><text x="88.1288%" y="351.50">std::sys::unix::ne..</text></g><g><title>std::sys::unix::fd::FileDesc::write (260 samples, 12.12%)</title><rect x="87.8788%" y="325" width="12.1212%" height="15" fill="rgb(205,151,52)" fg:x="1885" fg:w="260"/><text x="88.1288%" y="335.50">std::sys::unix::fd..</text></g><g><title>write (260 samples, 12.12%)</title><rect x="87.8788%" y="309" width="12.1212%" height="15" fill="rgb(253,215,39)" fg:x="1885" fg:w="260"/><text x="88.1288%" y="319.50">write</text></g><g><title>[unknown] (258 samples, 12.03%)</title><rect x="87.9720%" y="293" width="12.0280%" height="15" fill="rgb(221,220,41)" fg:x="1887" fg:w="258"/><text x="88.2220%" y="303.50">[unknown]</text></g><g><title>[unknown] (257 samples, 11.98%)</title><rect x="88.0186%" y="277" width="11.9814%" height="15" fill="rgb(218,133,21)" fg:x="1888" fg:w="257"/><text x="88.2686%" y="287.50">[unknown]</text></g><g><title>[unknown] (254 samples, 11.84%)</title><rect x="88.1585%" y="261" width="11.8415%" height="15" fill="rgb(221,193,43)" fg:x="1891" fg:w="254"/><text x="88.4085%" y="271.50">[unknown]</text></g><g><title>[unknown] (249 samples, 11.61%)</title><rect x="88.3916%" y="245" width="11.6084%" height="15" fill="rgb(240,128,52)" fg:x="1896" fg:w="249"/><text x="88.6416%" y="255.50">[unknown]</text></g><g><title>[unknown] (242 samples, 11.28%)</title><rect x="88.7179%" y="229" width="11.2821%" height="15" fill="rgb(253,114,12)" fg:x="1903" fg:w="242"/><text x="88.9679%" y="239.50">[unknown]</text></g><g><title>[unknown] (216 samples, 10.07%)</title><rect x="89.9301%" y="213" width="10.0699%" height="15" fill="rgb(215,223,47)" fg:x="1929" fg:w="216"/><text x="90.1801%" y="223.50">[unknown]</text></g><g><title>[unknown] (205 samples, 9.56%)</title><rect x="90.4429%" y="197" width="9.5571%" height="15" fill="rgb(248,225,23)" fg:x="1940" fg:w="205"/><text x="90.6929%" y="207.50">[unknown]</text></g><g><title>[unknown] (168 samples, 7.83%)</title><rect x="92.1678%" y="181" width="7.8322%" height="15" fill="rgb(250,108,0)" fg:x="1977" fg:w="168"/><text x="92.4178%" y="191.50">[unknown]</text></g><g><title>[unknown] (114 samples, 5.31%)</title><rect x="94.6853%" y="165" width="5.3147%" height="15" fill="rgb(228,208,7)" fg:x="2031" fg:w="114"/><text x="94.9353%" y="175.50">[unknow..</text></g><g><title>[unknown] (77 samples, 3.59%)</title><rect x="96.4103%" y="149" width="3.5897%" height="15" fill="rgb(244,45,10)" fg:x="2068" fg:w="77"/><text x="96.6603%" y="159.50">[unk..</text></g><g><title>[unknown] (66 samples, 3.08%)</title><rect x="96.9231%" y="133" width="3.0769%" height="15" fill="rgb(207,125,25)" fg:x="2079" fg:w="66"/><text x="97.1731%" y="143.50">[un..</text></g><g><title>[unknown] (62 samples, 2.89%)</title><rect x="97.1096%" y="117" width="2.8904%" height="15" fill="rgb(210,195,18)" fg:x="2083" fg:w="62"/><text x="97.3596%" y="127.50">[u..</text></g><g><title>[unknown] (45 samples, 2.10%)</title><rect x="97.9021%" y="101" width="2.0979%" height="15" fill="rgb(249,80,12)" fg:x="2100" fg:w="45"/><text x="98.1521%" y="111.50">[..</text></g><g><title>[unknown] (18 samples, 0.84%)</title><rect x="99.1608%" y="85" width="0.8392%" height="15" fill="rgb(221,65,9)" fg:x="2127" fg:w="18"/><text x="99.4108%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.33%)</title><rect x="99.6737%" y="69" width="0.3263%" height="15" fill="rgb(235,49,36)" fg:x="2138" fg:w="7"/><text x="99.9237%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9534%" y="53" width="0.0466%" height="15" fill="rgb(225,32,20)" fg:x="2144" fg:w="1"/><text x="100.2034%" y="63.50"></text></g></svg></svg>