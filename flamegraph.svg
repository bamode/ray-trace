<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="4993"><g><title>[[heap]] (1 samples, 0.02%)</title><rect x="0.0000%" y="677" width="0.0200%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.02%)</title><rect x="0.0000%" y="661" width="0.0200%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.0000%" y="645" width="0.0200%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.0000%" y="629" width="0.0200%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0000%" y="613" width="0.0200%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>[[stack]] (12 samples, 0.24%)</title><rect x="0.0200%" y="677" width="0.2403%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="12"/><text x="0.2700%" y="687.50"></text></g><g><title>ioctl (12 samples, 0.24%)</title><rect x="0.0200%" y="661" width="0.2403%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="12"/><text x="0.2700%" y="671.50"></text></g><g><title>[unknown] (12 samples, 0.24%)</title><rect x="0.0200%" y="645" width="0.2403%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="12"/><text x="0.2700%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.2604%" y="645" width="0.0200%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="1"/><text x="0.5104%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.2604%" y="629" width="0.0200%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="1"/><text x="0.5104%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.08%)</title><rect x="0.2604%" y="661" width="0.0801%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="4"/><text x="0.5104%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.06%)</title><rect x="0.2804%" y="645" width="0.0601%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="3"/><text x="0.5304%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.3004%" y="629" width="0.0401%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="2"/><text x="0.5504%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.3004%" y="613" width="0.0401%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="2"/><text x="0.5504%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.3004%" y="597" width="0.0401%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="2"/><text x="0.5504%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3204%" y="581" width="0.0200%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="1"/><text x="0.5704%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3204%" y="565" width="0.0200%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="1"/><text x="0.5704%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3204%" y="549" width="0.0200%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="1"/><text x="0.5704%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3204%" y="533" width="0.0200%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="1"/><text x="0.5704%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.12%)</title><rect x="0.2604%" y="677" width="0.1202%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="6"/><text x="0.5104%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.3405%" y="661" width="0.0401%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="2"/><text x="0.5905%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3605%" y="645" width="0.0200%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="1"/><text x="0.6105%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3605%" y="629" width="0.0200%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="1"/><text x="0.6105%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3605%" y="613" width="0.0200%" height="15" fill="rgb(247,18,42)" fg:x="18" fg:w="1"/><text x="0.6105%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3605%" y="597" width="0.0200%" height="15" fill="rgb(241,131,45)" fg:x="18" fg:w="1"/><text x="0.6105%" y="607.50"></text></g><g><title>[unknown] (17 samples, 0.34%)</title><rect x="0.3805%" y="677" width="0.3405%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="17"/><text x="0.6305%" y="687.50"></text></g><g><title>write (15 samples, 0.30%)</title><rect x="0.4206%" y="661" width="0.3004%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="15"/><text x="0.6706%" y="671.50"></text></g><g><title>[unknown] (15 samples, 0.30%)</title><rect x="0.4206%" y="645" width="0.3004%" height="15" fill="rgb(238,160,17)" fg:x="21" fg:w="15"/><text x="0.6706%" y="655.50"></text></g><g><title>&lt;ray_trace::sphere::Sphere as ray_trace::hit::Hit&gt;::hit (2,466 samples, 49.39%)</title><rect x="20.6289%" y="421" width="49.3891%" height="15" fill="rgb(214,148,48)" fg:x="1030" fg:w="2466"/><text x="20.8789%" y="431.50">&lt;ray_trace::sphere::Sphere as ray_trace::hit::Hit&gt;::hit</text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="69.9780%" y="405" width="0.0401%" height="15" fill="rgb(232,36,49)" fg:x="3494" fg:w="2"/><text x="70.2280%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="69.9780%" y="389" width="0.0401%" height="15" fill="rgb(209,103,24)" fg:x="3494" fg:w="2"/><text x="70.2280%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="373" width="0.0200%" height="15" fill="rgb(229,88,8)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="357" width="0.0200%" height="15" fill="rgb(213,181,19)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="341" width="0.0200%" height="15" fill="rgb(254,191,54)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="325" width="0.0200%" height="15" fill="rgb(241,83,37)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="309" width="0.0200%" height="15" fill="rgb(233,36,39)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="293" width="0.0200%" height="15" fill="rgb(226,3,54)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="277" width="0.0200%" height="15" fill="rgb(245,192,40)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="69.9980%" y="261" width="0.0200%" height="15" fill="rgb(238,167,29)" fg:x="3495" fg:w="1"/><text x="70.2480%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="70.0180%" y="421" width="0.0200%" height="15" fill="rgb(232,182,51)" fg:x="3496" fg:w="1"/><text x="70.2680%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (55 samples, 1.10%)</title><rect x="70.4386%" y="309" width="1.1015%" height="15" fill="rgb(231,60,39)" fg:x="3517" fg:w="55"/><text x="70.6886%" y="319.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (55 samples, 1.10%)</title><rect x="70.4386%" y="293" width="1.1015%" height="15" fill="rgb(208,69,12)" fg:x="3517" fg:w="55"/><text x="70.6886%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (55 samples, 1.10%)</title><rect x="70.4386%" y="277" width="1.1015%" height="15" fill="rgb(235,93,37)" fg:x="3517" fg:w="55"/><text x="70.6886%" y="287.50"></text></g><g><title>write (55 samples, 1.10%)</title><rect x="70.4386%" y="261" width="1.1015%" height="15" fill="rgb(213,116,39)" fg:x="3517" fg:w="55"/><text x="70.6886%" y="271.50"></text></g><g><title>[unknown] (54 samples, 1.08%)</title><rect x="70.4586%" y="245" width="1.0815%" height="15" fill="rgb(222,207,29)" fg:x="3518" fg:w="54"/><text x="70.7086%" y="255.50"></text></g><g><title>[unknown] (54 samples, 1.08%)</title><rect x="70.4586%" y="229" width="1.0815%" height="15" fill="rgb(206,96,30)" fg:x="3518" fg:w="54"/><text x="70.7086%" y="239.50"></text></g><g><title>[unknown] (51 samples, 1.02%)</title><rect x="70.5187%" y="213" width="1.0214%" height="15" fill="rgb(218,138,4)" fg:x="3521" fg:w="51"/><text x="70.7687%" y="223.50"></text></g><g><title>[unknown] (48 samples, 0.96%)</title><rect x="70.5788%" y="197" width="0.9613%" height="15" fill="rgb(250,191,14)" fg:x="3524" fg:w="48"/><text x="70.8288%" y="207.50"></text></g><g><title>[unknown] (48 samples, 0.96%)</title><rect x="70.5788%" y="181" width="0.9613%" height="15" fill="rgb(239,60,40)" fg:x="3524" fg:w="48"/><text x="70.8288%" y="191.50"></text></g><g><title>[unknown] (41 samples, 0.82%)</title><rect x="70.7190%" y="165" width="0.8211%" height="15" fill="rgb(206,27,48)" fg:x="3531" fg:w="41"/><text x="70.9690%" y="175.50"></text></g><g><title>[unknown] (26 samples, 0.52%)</title><rect x="71.0194%" y="149" width="0.5207%" height="15" fill="rgb(225,35,8)" fg:x="3546" fg:w="26"/><text x="71.2694%" y="159.50"></text></g><g><title>[unknown] (20 samples, 0.40%)</title><rect x="71.1396%" y="133" width="0.4006%" height="15" fill="rgb(250,213,24)" fg:x="3552" fg:w="20"/><text x="71.3896%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.10%)</title><rect x="71.4400%" y="117" width="0.1001%" height="15" fill="rgb(247,123,22)" fg:x="3567" fg:w="5"/><text x="71.6900%" y="127.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (58 samples, 1.16%)</title><rect x="70.3986%" y="405" width="1.1616%" height="15" fill="rgb(231,138,38)" fg:x="3515" fg:w="58"/><text x="70.6486%" y="415.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (58 samples, 1.16%)</title><rect x="70.3986%" y="389" width="1.1616%" height="15" fill="rgb(231,145,46)" fg:x="3515" fg:w="58"/><text x="70.6486%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (58 samples, 1.16%)</title><rect x="70.3986%" y="373" width="1.1616%" height="15" fill="rgb(251,118,11)" fg:x="3515" fg:w="58"/><text x="70.6486%" y="383.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (58 samples, 1.16%)</title><rect x="70.3986%" y="357" width="1.1616%" height="15" fill="rgb(217,147,25)" fg:x="3515" fg:w="58"/><text x="70.6486%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (58 samples, 1.16%)</title><rect x="70.3986%" y="341" width="1.1616%" height="15" fill="rgb(247,81,37)" fg:x="3515" fg:w="58"/><text x="70.6486%" y="351.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (58 samples, 1.16%)</title><rect x="70.3986%" y="325" width="1.1616%" height="15" fill="rgb(209,12,38)" fg:x="3515" fg:w="58"/><text x="70.6486%" y="335.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::done (1 samples, 0.02%)</title><rect x="71.5402%" y="309" width="0.0200%" height="15" fill="rgb(227,1,9)" fg:x="3572" fg:w="1"/><text x="71.7902%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (16 samples, 0.32%)</title><rect x="73.3627%" y="341" width="0.3204%" height="15" fill="rgb(248,47,43)" fg:x="3663" fg:w="16"/><text x="73.6127%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (16 samples, 0.32%)</title><rect x="73.3627%" y="325" width="0.3204%" height="15" fill="rgb(221,10,30)" fg:x="3663" fg:w="16"/><text x="73.6127%" y="335.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.32%)</title><rect x="73.3627%" y="309" width="0.3204%" height="15" fill="rgb(210,229,1)" fg:x="3663" fg:w="16"/><text x="73.6127%" y="319.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (16 samples, 0.32%)</title><rect x="73.3627%" y="293" width="0.3204%" height="15" fill="rgb(222,148,37)" fg:x="3663" fg:w="16"/><text x="73.6127%" y="303.50"></text></g><g><title>pthread_mutex_unlock (16 samples, 0.32%)</title><rect x="73.3627%" y="277" width="0.3204%" height="15" fill="rgb(234,67,33)" fg:x="3663" fg:w="16"/><text x="73.6127%" y="287.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (19 samples, 0.38%)</title><rect x="74.3641%" y="309" width="0.3805%" height="15" fill="rgb(247,98,35)" fg:x="3713" fg:w="19"/><text x="74.6141%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.28%)</title><rect x="74.7446%" y="309" width="0.2804%" height="15" fill="rgb(247,138,52)" fg:x="3732" fg:w="14"/><text x="74.9946%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.28%)</title><rect x="74.7446%" y="293" width="0.2804%" height="15" fill="rgb(213,79,30)" fg:x="3732" fg:w="14"/><text x="74.9946%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (11 samples, 0.22%)</title><rect x="75.4256%" y="245" width="0.2203%" height="15" fill="rgb(246,177,23)" fg:x="3766" fg:w="11"/><text x="75.6756%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (11 samples, 0.22%)</title><rect x="75.4256%" y="229" width="0.2203%" height="15" fill="rgb(230,62,27)" fg:x="3766" fg:w="11"/><text x="75.6756%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.20%)</title><rect x="75.4456%" y="213" width="0.2003%" height="15" fill="rgb(216,154,8)" fg:x="3767" fg:w="10"/><text x="75.6956%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="75.5458%" y="197" width="0.1001%" height="15" fill="rgb(244,35,45)" fg:x="3772" fg:w="5"/><text x="75.7958%" y="207.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (3 samples, 0.06%)</title><rect x="75.6459%" y="245" width="0.0601%" height="15" fill="rgb(251,115,12)" fg:x="3777" fg:w="3"/><text x="75.8959%" y="255.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (2 samples, 0.04%)</title><rect x="75.6659%" y="229" width="0.0401%" height="15" fill="rgb(240,54,50)" fg:x="3778" fg:w="2"/><text x="75.9159%" y="239.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (44 samples, 0.88%)</title><rect x="75.4256%" y="277" width="0.8812%" height="15" fill="rgb(233,84,52)" fg:x="3766" fg:w="44"/><text x="75.6756%" y="287.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (44 samples, 0.88%)</title><rect x="75.4256%" y="261" width="0.8812%" height="15" fill="rgb(207,117,47)" fg:x="3766" fg:w="44"/><text x="75.6756%" y="271.50"></text></g><g><title>std::sys_common::memchr::memrchr (30 samples, 0.60%)</title><rect x="75.7060%" y="245" width="0.6008%" height="15" fill="rgb(249,43,39)" fg:x="3780" fg:w="30"/><text x="75.9560%" y="255.50"></text></g><g><title>std::sys::unix::memchr::memrchr (30 samples, 0.60%)</title><rect x="75.7060%" y="229" width="0.6008%" height="15" fill="rgb(209,38,44)" fg:x="3780" fg:w="30"/><text x="75.9560%" y="239.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (30 samples, 0.60%)</title><rect x="75.7060%" y="213" width="0.6008%" height="15" fill="rgb(236,212,23)" fg:x="3780" fg:w="30"/><text x="75.9560%" y="223.50"></text></g><g><title>[libc.so.6] (30 samples, 0.60%)</title><rect x="75.7060%" y="197" width="0.6008%" height="15" fill="rgb(242,79,21)" fg:x="3780" fg:w="30"/><text x="75.9560%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (70 samples, 1.40%)</title><rect x="75.0250%" y="309" width="1.4020%" height="15" fill="rgb(211,96,35)" fg:x="3746" fg:w="70"/><text x="75.2750%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (65 samples, 1.30%)</title><rect x="75.1252%" y="293" width="1.3018%" height="15" fill="rgb(253,215,40)" fg:x="3751" fg:w="65"/><text x="75.3752%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.12%)</title><rect x="76.3068%" y="277" width="0.1202%" height="15" fill="rgb(211,81,21)" fg:x="3810" fg:w="6"/><text x="76.5568%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.12%)</title><rect x="76.3068%" y="261" width="0.1202%" height="15" fill="rgb(208,190,38)" fg:x="3810" fg:w="6"/><text x="76.5568%" y="271.50"></text></g><g><title>core::cell::BorrowRefMut::new (6 samples, 0.12%)</title><rect x="76.3068%" y="245" width="0.1202%" height="15" fill="rgb(235,213,38)" fg:x="3810" fg:w="6"/><text x="76.5568%" y="255.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.02%)</title><rect x="76.4270%" y="309" width="0.0200%" height="15" fill="rgb(237,122,38)" fg:x="3816" fg:w="1"/><text x="76.6770%" y="319.50"></text></g><g><title>core::fmt::Formatter::pad (12 samples, 0.24%)</title><rect x="76.4470%" y="309" width="0.2403%" height="15" fill="rgb(244,218,35)" fg:x="3817" fg:w="12"/><text x="76.6970%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="76.7875%" y="149" width="0.0200%" height="15" fill="rgb(240,68,47)" fg:x="3834" fg:w="1"/><text x="77.0375%" y="159.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (2 samples, 0.04%)</title><rect x="76.7875%" y="277" width="0.0401%" height="15" fill="rgb(210,16,53)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="287.50"></text></g><g><title>core::str::count::count_chars (2 samples, 0.04%)</title><rect x="76.7875%" y="261" width="0.0401%" height="15" fill="rgb(235,124,12)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="271.50"></text></g><g><title>core::str::count::char_count_general_case (2 samples, 0.04%)</title><rect x="76.7875%" y="245" width="0.0401%" height="15" fill="rgb(224,169,11)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (2 samples, 0.04%)</title><rect x="76.7875%" y="229" width="0.0401%" height="15" fill="rgb(250,166,2)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.04%)</title><rect x="76.7875%" y="213" width="0.0401%" height="15" fill="rgb(242,216,29)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="223.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.04%)</title><rect x="76.7875%" y="197" width="0.0401%" height="15" fill="rgb(230,116,27)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.04%)</title><rect x="76.7875%" y="181" width="0.0401%" height="15" fill="rgb(228,99,48)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.04%)</title><rect x="76.7875%" y="165" width="0.0401%" height="15" fill="rgb(253,11,6)" fg:x="3834" fg:w="2"/><text x="77.0375%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.02%)</title><rect x="76.8075%" y="149" width="0.0200%" height="15" fill="rgb(247,143,39)" fg:x="3835" fg:w="1"/><text x="77.0575%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (1 samples, 0.02%)</title><rect x="76.8075%" y="133" width="0.0200%" height="15" fill="rgb(236,97,10)" fg:x="3835" fg:w="1"/><text x="77.0575%" y="143.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (21 samples, 0.42%)</title><rect x="77.6487%" y="181" width="0.4206%" height="15" fill="rgb(233,208,19)" fg:x="3877" fg:w="21"/><text x="77.8987%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (21 samples, 0.42%)</title><rect x="77.6487%" y="165" width="0.4206%" height="15" fill="rgb(216,164,2)" fg:x="3877" fg:w="21"/><text x="77.8987%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.42%)</title><rect x="77.6487%" y="149" width="0.4206%" height="15" fill="rgb(220,129,5)" fg:x="3877" fg:w="21"/><text x="77.8987%" y="159.50"></text></g><g><title>[libc.so.6] (13 samples, 0.26%)</title><rect x="77.8089%" y="133" width="0.2604%" height="15" fill="rgb(242,17,10)" fg:x="3885" fg:w="13"/><text x="78.0589%" y="143.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (4 samples, 0.08%)</title><rect x="78.0693%" y="165" width="0.0801%" height="15" fill="rgb(242,107,0)" fg:x="3898" fg:w="4"/><text x="78.3193%" y="175.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (5 samples, 0.10%)</title><rect x="78.0693%" y="181" width="0.1001%" height="15" fill="rgb(251,28,31)" fg:x="3898" fg:w="5"/><text x="78.3193%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.02%)</title><rect x="78.1494%" y="165" width="0.0200%" height="15" fill="rgb(233,223,10)" fg:x="3902" fg:w="1"/><text x="78.3994%" y="175.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (184 samples, 3.69%)</title><rect x="77.6487%" y="213" width="3.6852%" height="15" fill="rgb(215,21,27)" fg:x="3877" fg:w="184"/><text x="77.8987%" y="223.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (184 samples, 3.69%)</title><rect x="77.6487%" y="197" width="3.6852%" height="15" fill="rgb(232,23,21)" fg:x="3877" fg:w="184"/><text x="77.8987%" y="207.50">&lt;std..</text></g><g><title>std::sys_common::memchr::memrchr (158 samples, 3.16%)</title><rect x="78.1694%" y="181" width="3.1644%" height="15" fill="rgb(244,5,23)" fg:x="3903" fg:w="158"/><text x="78.4194%" y="191.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr (158 samples, 3.16%)</title><rect x="78.1694%" y="165" width="3.1644%" height="15" fill="rgb(226,81,46)" fg:x="3903" fg:w="158"/><text x="78.4194%" y="175.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (158 samples, 3.16%)</title><rect x="78.1694%" y="149" width="3.1644%" height="15" fill="rgb(247,70,30)" fg:x="3903" fg:w="158"/><text x="78.4194%" y="159.50">std..</text></g><g><title>[libc.so.6] (155 samples, 3.10%)</title><rect x="78.2295%" y="133" width="3.1043%" height="15" fill="rgb(212,68,19)" fg:x="3906" fg:w="155"/><text x="78.4795%" y="143.50">[li..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.3138%" y="117" width="0.0200%" height="15" fill="rgb(240,187,13)" fg:x="4060" fg:w="1"/><text x="81.5638%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.3138%" y="101" width="0.0200%" height="15" fill="rgb(223,113,26)" fg:x="4060" fg:w="1"/><text x="81.5638%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.3138%" y="85" width="0.0200%" height="15" fill="rgb(206,192,2)" fg:x="4060" fg:w="1"/><text x="81.5638%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.3138%" y="69" width="0.0200%" height="15" fill="rgb(241,108,4)" fg:x="4060" fg:w="1"/><text x="81.5638%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.3138%" y="53" width="0.0200%" height="15" fill="rgb(247,173,49)" fg:x="4060" fg:w="1"/><text x="81.5638%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.3138%" y="37" width="0.0200%" height="15" fill="rgb(224,114,35)" fg:x="4060" fg:w="1"/><text x="81.5638%" y="47.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (220 samples, 4.41%)</title><rect x="77.0879%" y="245" width="4.4062%" height="15" fill="rgb(245,159,27)" fg:x="3849" fg:w="220"/><text x="77.3379%" y="255.50">&lt;std:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (218 samples, 4.37%)</title><rect x="77.1280%" y="229" width="4.3661%" height="15" fill="rgb(245,172,44)" fg:x="3851" fg:w="218"/><text x="77.3780%" y="239.50">&lt;std:..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (8 samples, 0.16%)</title><rect x="81.3339%" y="213" width="0.1602%" height="15" fill="rgb(236,23,11)" fg:x="4061" fg:w="8"/><text x="81.5839%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (8 samples, 0.16%)</title><rect x="81.3339%" y="197" width="0.1602%" height="15" fill="rgb(205,117,38)" fg:x="4061" fg:w="8"/><text x="81.5839%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (8 samples, 0.16%)</title><rect x="81.3339%" y="181" width="0.1602%" height="15" fill="rgb(237,72,25)" fg:x="4061" fg:w="8"/><text x="81.5839%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4941%" y="245" width="0.0200%" height="15" fill="rgb(244,70,9)" fg:x="4069" fg:w="1"/><text x="81.7441%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.4941%" y="229" width="0.0200%" height="15" fill="rgb(217,125,39)" fg:x="4069" fg:w="1"/><text x="81.7441%" y="239.50"></text></g><g><title>core::fmt::Write::write_char (240 samples, 4.81%)</title><rect x="76.8276%" y="261" width="4.8067%" height="15" fill="rgb(235,36,10)" fg:x="3836" fg:w="240"/><text x="77.0776%" y="271.50">core::..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (6 samples, 0.12%)</title><rect x="81.5141%" y="245" width="0.1202%" height="15" fill="rgb(251,123,47)" fg:x="4070" fg:w="6"/><text x="81.7641%" y="255.50"></text></g><g><title>core::char::methods::encode_utf8_raw (6 samples, 0.12%)</title><rect x="81.5141%" y="229" width="0.1202%" height="15" fill="rgb(221,13,13)" fg:x="4070" fg:w="6"/><text x="81.7641%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad (251 samples, 5.03%)</title><rect x="76.7675%" y="293" width="5.0270%" height="15" fill="rgb(238,131,9)" fg:x="3833" fg:w="251"/><text x="77.0175%" y="303.50">core::..</text></g><g><title>core::fmt::PostPadding::write (248 samples, 4.97%)</title><rect x="76.8276%" y="277" width="4.9670%" height="15" fill="rgb(211,50,8)" fg:x="3836" fg:w="248"/><text x="77.0776%" y="287.50">core::..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.16%)</title><rect x="81.6343%" y="261" width="0.1602%" height="15" fill="rgb(245,182,24)" fg:x="4076" fg:w="8"/><text x="81.8843%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8 samples, 0.16%)</title><rect x="81.6343%" y="245" width="0.1602%" height="15" fill="rgb(242,14,37)" fg:x="4076" fg:w="8"/><text x="81.8843%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8 samples, 0.16%)</title><rect x="81.6343%" y="229" width="0.1602%" height="15" fill="rgb(246,228,12)" fg:x="4076" fg:w="8"/><text x="81.8843%" y="239.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.08%)</title><rect x="82.0148%" y="245" width="0.0801%" height="15" fill="rgb(213,55,15)" fg:x="4095" fg:w="4"/><text x="82.2648%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.06%)</title><rect x="82.0348%" y="229" width="0.0601%" height="15" fill="rgb(209,9,3)" fg:x="4096" fg:w="3"/><text x="82.2848%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.04%)</title><rect x="82.0549%" y="213" width="0.0401%" height="15" fill="rgb(230,59,30)" fg:x="4097" fg:w="2"/><text x="82.3049%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.04%)</title><rect x="82.0549%" y="197" width="0.0401%" height="15" fill="rgb(209,121,21)" fg:x="4097" fg:w="2"/><text x="82.3049%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.04%)</title><rect x="82.0549%" y="181" width="0.0401%" height="15" fill="rgb(220,109,13)" fg:x="4097" fg:w="2"/><text x="82.3049%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.02%)</title><rect x="82.0949%" y="245" width="0.0200%" height="15" fill="rgb(232,18,1)" fg:x="4099" fg:w="1"/><text x="82.3449%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.10%)</title><rect x="82.2151%" y="149" width="0.1001%" height="15" fill="rgb(215,41,42)" fg:x="4105" fg:w="5"/><text x="82.4651%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (5 samples, 0.10%)</title><rect x="82.2151%" y="133" width="0.1001%" height="15" fill="rgb(224,123,36)" fg:x="4105" fg:w="5"/><text x="82.4651%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.10%)</title><rect x="82.2151%" y="117" width="0.1001%" height="15" fill="rgb(240,125,3)" fg:x="4105" fg:w="5"/><text x="82.4651%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="82.2351%" y="101" width="0.0801%" height="15" fill="rgb(205,98,50)" fg:x="4106" fg:w="4"/><text x="82.4851%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2952%" y="85" width="0.0200%" height="15" fill="rgb(205,185,37)" fg:x="4109" fg:w="1"/><text x="82.5452%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2952%" y="69" width="0.0200%" height="15" fill="rgb(238,207,15)" fg:x="4109" fg:w="1"/><text x="82.5452%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2952%" y="53" width="0.0200%" height="15" fill="rgb(213,199,42)" fg:x="4109" fg:w="1"/><text x="82.5452%" y="63.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (23 samples, 0.46%)</title><rect x="82.1550%" y="213" width="0.4606%" height="15" fill="rgb(235,201,11)" fg:x="4102" fg:w="23"/><text x="82.4050%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (23 samples, 0.46%)</title><rect x="82.1550%" y="197" width="0.4606%" height="15" fill="rgb(207,46,11)" fg:x="4102" fg:w="23"/><text x="82.4050%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.40%)</title><rect x="82.2151%" y="181" width="0.4006%" height="15" fill="rgb(241,35,35)" fg:x="4105" fg:w="20"/><text x="82.4651%" y="191.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (20 samples, 0.40%)</title><rect x="82.2151%" y="165" width="0.4006%" height="15" fill="rgb(243,32,47)" fg:x="4105" fg:w="20"/><text x="82.4651%" y="175.50"></text></g><g><title>std::sys_common::memchr::memrchr (15 samples, 0.30%)</title><rect x="82.3152%" y="149" width="0.3004%" height="15" fill="rgb(247,202,23)" fg:x="4110" fg:w="15"/><text x="82.5652%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (15 samples, 0.30%)</title><rect x="82.3152%" y="133" width="0.3004%" height="15" fill="rgb(219,102,11)" fg:x="4110" fg:w="15"/><text x="82.5652%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (15 samples, 0.30%)</title><rect x="82.3152%" y="117" width="0.3004%" height="15" fill="rgb(243,110,44)" fg:x="4110" fg:w="15"/><text x="82.5652%" y="127.50"></text></g><g><title>[libc.so.6] (13 samples, 0.26%)</title><rect x="82.3553%" y="101" width="0.2604%" height="15" fill="rgb(222,74,54)" fg:x="4112" fg:w="13"/><text x="82.6053%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.5956%" y="85" width="0.0200%" height="15" fill="rgb(216,99,12)" fg:x="4124" fg:w="1"/><text x="82.8456%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.5956%" y="69" width="0.0200%" height="15" fill="rgb(226,22,26)" fg:x="4124" fg:w="1"/><text x="82.8456%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.5956%" y="53" width="0.0200%" height="15" fill="rgb(217,163,10)" fg:x="4124" fg:w="1"/><text x="82.8456%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.5956%" y="37" width="0.0200%" height="15" fill="rgb(213,25,53)" fg:x="4124" fg:w="1"/><text x="82.8456%" y="47.50"></text></g><g><title>core::fmt::Formatter::pad_integral (37 samples, 0.74%)</title><rect x="81.8947%" y="261" width="0.7410%" height="15" fill="rgb(252,105,26)" fg:x="4089" fg:w="37"/><text x="82.1447%" y="271.50"></text></g><g><title>core::fmt::Formatter::padding (26 samples, 0.52%)</title><rect x="82.1150%" y="245" width="0.5207%" height="15" fill="rgb(220,39,43)" fg:x="4100" fg:w="26"/><text x="82.3650%" y="255.50"></text></g><g><title>core::fmt::Write::write_char (26 samples, 0.52%)</title><rect x="82.1150%" y="229" width="0.5207%" height="15" fill="rgb(229,68,48)" fg:x="4100" fg:w="26"/><text x="82.3650%" y="239.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1 samples, 0.02%)</title><rect x="82.6157%" y="213" width="0.0200%" height="15" fill="rgb(252,8,32)" fg:x="4125" fg:w="1"/><text x="82.8657%" y="223.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1 samples, 0.02%)</title><rect x="82.6157%" y="197" width="0.0200%" height="15" fill="rgb(223,20,43)" fg:x="4125" fg:w="1"/><text x="82.8657%" y="207.50"></text></g><g><title>core::fmt::run (300 samples, 6.01%)</title><rect x="76.6874%" y="309" width="6.0084%" height="15" fill="rgb(229,81,49)" fg:x="3829" fg:w="300"/><text x="76.9374%" y="319.50">core::fm..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (45 samples, 0.90%)</title><rect x="81.7945%" y="293" width="0.9013%" height="15" fill="rgb(236,28,36)" fg:x="4084" fg:w="45"/><text x="82.0445%" y="303.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (41 samples, 0.82%)</title><rect x="81.8746%" y="277" width="0.8211%" height="15" fill="rgb(249,185,26)" fg:x="4088" fg:w="41"/><text x="82.1246%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.06%)</title><rect x="82.6357%" y="261" width="0.0601%" height="15" fill="rgb(249,174,33)" fg:x="4126" fg:w="3"/><text x="82.8857%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (452 samples, 9.05%)</title><rect x="73.6832%" y="341" width="9.0527%" height="15" fill="rgb(233,201,37)" fg:x="3679" fg:w="452"/><text x="73.9332%" y="351.50">std::io::Writ..</text></g><g><title>core::fmt::write (445 samples, 8.91%)</title><rect x="73.8234%" y="325" width="8.9125%" height="15" fill="rgb(221,78,26)" fg:x="3686" fg:w="445"/><text x="74.0734%" y="335.50">core::fmt::wr..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (2 samples, 0.04%)</title><rect x="82.6958%" y="309" width="0.0401%" height="15" fill="rgb(250,127,30)" fg:x="4129" fg:w="2"/><text x="82.9458%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (509 samples, 10.19%)</title><rect x="72.8420%" y="373" width="10.1943%" height="15" fill="rgb(230,49,44)" fg:x="3637" fg:w="509"/><text x="73.0920%" y="383.50">&lt;std::io::stdio..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (491 samples, 9.83%)</title><rect x="73.2025%" y="357" width="9.8338%" height="15" fill="rgb(229,67,23)" fg:x="3655" fg:w="491"/><text x="73.4525%" y="367.50">&lt;&amp;std::io::std..</text></g><g><title>std::io::stdio::Stdout::lock (15 samples, 0.30%)</title><rect x="82.7358%" y="341" width="0.3004%" height="15" fill="rgb(249,83,47)" fg:x="4131" fg:w="15"/><text x="82.9858%" y="351.50"></text></g><g><title>std::io::stdio::Stdout::lock_any (15 samples, 0.30%)</title><rect x="82.7358%" y="325" width="0.3004%" height="15" fill="rgb(215,43,3)" fg:x="4131" fg:w="15"/><text x="82.9858%" y="335.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (15 samples, 0.30%)</title><rect x="82.7358%" y="309" width="0.3004%" height="15" fill="rgb(238,154,13)" fg:x="4131" fg:w="15"/><text x="82.9858%" y="319.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (15 samples, 0.30%)</title><rect x="82.7358%" y="293" width="0.3004%" height="15" fill="rgb(219,56,2)" fg:x="4131" fg:w="15"/><text x="82.9858%" y="303.50"></text></g><g><title>pthread_mutex_lock (15 samples, 0.30%)</title><rect x="82.7358%" y="277" width="0.3004%" height="15" fill="rgb(233,0,4)" fg:x="4131" fg:w="15"/><text x="82.9858%" y="287.50"></text></g><g><title>std::io::stdio::_print (575 samples, 11.52%)</title><rect x="71.5602%" y="405" width="11.5161%" height="15" fill="rgb(235,30,7)" fg:x="3573" fg:w="575"/><text x="71.8102%" y="415.50">std::io::stdio::_..</text></g><g><title>std::io::stdio::print_to (512 samples, 10.25%)</title><rect x="72.8220%" y="389" width="10.2544%" height="15" fill="rgb(250,79,13)" fg:x="3636" fg:w="512"/><text x="73.0720%" y="399.50">std::io::stdio:..</text></g><g><title>std::io::stdio::stdout (2 samples, 0.04%)</title><rect x="83.0363%" y="373" width="0.0401%" height="15" fill="rgb(211,146,34)" fg:x="4146" fg:w="2"/><text x="83.2863%" y="383.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init_pin (2 samples, 0.04%)</title><rect x="83.0363%" y="357" width="0.0401%" height="15" fill="rgb(228,22,38)" fg:x="4146" fg:w="2"/><text x="83.2863%" y="367.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get (2 samples, 0.04%)</title><rect x="83.0363%" y="341" width="0.0401%" height="15" fill="rgb(235,168,5)" fg:x="4146" fg:w="2"/><text x="83.2863%" y="351.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::is_initialized (2 samples, 0.04%)</title><rect x="83.0363%" y="325" width="0.0401%" height="15" fill="rgb(221,155,16)" fg:x="4146" fg:w="2"/><text x="83.2863%" y="335.50"></text></g><g><title>std::sync::once::Once::is_completed (2 samples, 0.04%)</title><rect x="83.0363%" y="309" width="0.0401%" height="15" fill="rgb(215,215,53)" fg:x="4146" fg:w="2"/><text x="83.2863%" y="319.50"></text></g><g><title>ioctl (2 samples, 0.04%)</title><rect x="83.0763%" y="389" width="0.0401%" height="15" fill="rgb(223,4,10)" fg:x="4148" fg:w="2"/><text x="83.3263%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="83.0763%" y="373" width="0.0401%" height="15" fill="rgb(234,103,6)" fg:x="4148" fg:w="2"/><text x="83.3263%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="83.0763%" y="357" width="0.0401%" height="15" fill="rgb(227,97,0)" fg:x="4148" fg:w="2"/><text x="83.3263%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0963%" y="341" width="0.0200%" height="15" fill="rgb(234,150,53)" fg:x="4149" fg:w="1"/><text x="83.3463%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="83.0963%" y="325" width="0.0200%" height="15" fill="rgb(228,201,54)" fg:x="4149" fg:w="1"/><text x="83.3463%" y="335.50"></text></g><g><title>progress::Bar::_show_progress (661 samples, 13.24%)</title><rect x="70.0381%" y="421" width="13.2385%" height="15" fill="rgb(222,22,37)" fg:x="3497" fg:w="661"/><text x="70.2881%" y="431.50">progress::Bar::_show..</text></g><g><title>terminal_size::unix::terminal_size (10 samples, 0.20%)</title><rect x="83.0763%" y="405" width="0.2003%" height="15" fill="rgb(237,53,32)" fg:x="4148" fg:w="10"/><text x="83.3263%" y="415.50"></text></g><g><title>isatty (8 samples, 0.16%)</title><rect x="83.1164%" y="389" width="0.1602%" height="15" fill="rgb(233,25,53)" fg:x="4150" fg:w="8"/><text x="83.3664%" y="399.50"></text></g><g><title>tcgetattr (6 samples, 0.12%)</title><rect x="83.1564%" y="373" width="0.1202%" height="15" fill="rgb(210,40,34)" fg:x="4152" fg:w="6"/><text x="83.4064%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.12%)</title><rect x="83.1564%" y="357" width="0.1202%" height="15" fill="rgb(241,220,44)" fg:x="4152" fg:w="6"/><text x="83.4064%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.10%)</title><rect x="83.1764%" y="341" width="0.1001%" height="15" fill="rgb(235,28,35)" fg:x="4153" fg:w="5"/><text x="83.4264%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.10%)</title><rect x="83.1764%" y="325" width="0.1001%" height="15" fill="rgb(210,56,17)" fg:x="4153" fg:w="5"/><text x="83.4264%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.10%)</title><rect x="83.1764%" y="309" width="0.1001%" height="15" fill="rgb(224,130,29)" fg:x="4153" fg:w="5"/><text x="83.4264%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="83.2365%" y="293" width="0.0401%" height="15" fill="rgb(235,212,8)" fg:x="4156" fg:w="2"/><text x="83.4865%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="83.2365%" y="277" width="0.0401%" height="15" fill="rgb(223,33,50)" fg:x="4156" fg:w="2"/><text x="83.4865%" y="287.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.02%)</title><rect x="87.8230%" y="405" width="0.0200%" height="15" fill="rgb(219,149,13)" fg:x="4385" fg:w="1"/><text x="88.0730%" y="415.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.02%)</title><rect x="87.8230%" y="389" width="0.0200%" height="15" fill="rgb(250,156,29)" fg:x="4385" fg:w="1"/><text x="88.0730%" y="399.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (2 samples, 0.04%)</title><rect x="87.8430%" y="405" width="0.0401%" height="15" fill="rgb(216,193,19)" fg:x="4386" fg:w="2"/><text x="88.0930%" y="415.50"></text></g><g><title>rand_chacha::guts::refill_wide (4 samples, 0.08%)</title><rect x="87.8830%" y="405" width="0.0801%" height="15" fill="rgb(216,135,14)" fg:x="4388" fg:w="4"/><text x="88.1330%" y="415.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (510 samples, 10.21%)</title><rect x="83.2766%" y="421" width="10.2143%" height="15" fill="rgb(241,47,5)" fg:x="4158" fg:w="510"/><text x="83.5266%" y="431.50">rand::distribut..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (276 samples, 5.53%)</title><rect x="87.9631%" y="405" width="5.5277%" height="15" fill="rgb(233,42,35)" fg:x="4392" fg:w="276"/><text x="88.2131%" y="415.50">rand_ch..</text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="93.6311%" y="405" width="0.0200%" height="15" fill="rgb(231,13,6)" fg:x="4675" fg:w="1"/><text x="93.8811%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.04%)</title><rect x="93.8314%" y="261" width="0.0401%" height="15" fill="rgb(207,181,40)" fg:x="4685" fg:w="2"/><text x="94.0814%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.10%)</title><rect x="93.8714%" y="261" width="0.1001%" height="15" fill="rgb(254,173,49)" fg:x="4687" fg:w="5"/><text x="94.1214%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="93.8714%" y="245" width="0.1001%" height="15" fill="rgb(221,1,38)" fg:x="4687" fg:w="5"/><text x="94.1214%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.22%)</title><rect x="93.7713%" y="357" width="0.2203%" height="15" fill="rgb(206,124,46)" fg:x="4682" fg:w="11"/><text x="94.0213%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.16%)</title><rect x="93.8314%" y="341" width="0.1602%" height="15" fill="rgb(249,21,11)" fg:x="4685" fg:w="8"/><text x="94.0814%" y="351.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.16%)</title><rect x="93.8314%" y="325" width="0.1602%" height="15" fill="rgb(222,201,40)" fg:x="4685" fg:w="8"/><text x="94.0814%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 0.16%)</title><rect x="93.8314%" y="309" width="0.1602%" height="15" fill="rgb(235,61,29)" fg:x="4685" fg:w="8"/><text x="94.0814%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.16%)</title><rect x="93.8314%" y="293" width="0.1602%" height="15" fill="rgb(219,207,3)" fg:x="4685" fg:w="8"/><text x="94.0814%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.16%)</title><rect x="93.8314%" y="277" width="0.1602%" height="15" fill="rgb(222,56,46)" fg:x="4685" fg:w="8"/><text x="94.0814%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="93.9716%" y="261" width="0.0200%" height="15" fill="rgb(239,76,54)" fg:x="4692" fg:w="1"/><text x="94.2216%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="93.9716%" y="245" width="0.0200%" height="15" fill="rgb(231,124,27)" fg:x="4692" fg:w="1"/><text x="94.2216%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.04%)</title><rect x="94.1718%" y="165" width="0.0401%" height="15" fill="rgb(249,195,6)" fg:x="4702" fg:w="2"/><text x="94.4218%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="94.2720%" y="101" width="0.0200%" height="15" fill="rgb(237,174,47)" fg:x="4707" fg:w="1"/><text x="94.5220%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.02%)</title><rect x="94.2720%" y="85" width="0.0200%" height="15" fill="rgb(206,201,31)" fg:x="4707" fg:w="1"/><text x="94.5220%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 0.38%)</title><rect x="94.2520%" y="149" width="0.3805%" height="15" fill="rgb(231,57,52)" fg:x="4706" fg:w="19"/><text x="94.5020%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 0.38%)</title><rect x="94.2520%" y="133" width="0.3805%" height="15" fill="rgb(248,177,22)" fg:x="4706" fg:w="19"/><text x="94.5020%" y="143.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.36%)</title><rect x="94.2720%" y="117" width="0.3605%" height="15" fill="rgb(215,211,37)" fg:x="4707" fg:w="18"/><text x="94.5220%" y="127.50"></text></g><g><title>realloc (17 samples, 0.34%)</title><rect x="94.2920%" y="101" width="0.3405%" height="15" fill="rgb(241,128,51)" fg:x="4708" fg:w="17"/><text x="94.5420%" y="111.50"></text></g><g><title>[libc.so.6] (7 samples, 0.14%)</title><rect x="94.4923%" y="85" width="0.1402%" height="15" fill="rgb(227,165,31)" fg:x="4718" fg:w="7"/><text x="94.7423%" y="95.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="94.6325%" y="149" width="0.0200%" height="15" fill="rgb(228,167,24)" fg:x="4725" fg:w="1"/><text x="94.8825%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="94.6525%" y="149" width="0.0200%" height="15" fill="rgb(228,143,12)" fg:x="4726" fg:w="1"/><text x="94.9025%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (31 samples, 0.62%)</title><rect x="94.1318%" y="229" width="0.6209%" height="15" fill="rgb(249,149,8)" fg:x="4700" fg:w="31"/><text x="94.3818%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.62%)</title><rect x="94.1318%" y="213" width="0.6209%" height="15" fill="rgb(243,35,44)" fg:x="4700" fg:w="31"/><text x="94.3818%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (30 samples, 0.60%)</title><rect x="94.1518%" y="197" width="0.6008%" height="15" fill="rgb(246,89,9)" fg:x="4701" fg:w="30"/><text x="94.4018%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (29 samples, 0.58%)</title><rect x="94.1718%" y="181" width="0.5808%" height="15" fill="rgb(233,213,13)" fg:x="4702" fg:w="29"/><text x="94.4218%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (27 samples, 0.54%)</title><rect x="94.2119%" y="165" width="0.5408%" height="15" fill="rgb(233,141,41)" fg:x="4704" fg:w="27"/><text x="94.4619%" y="175.50"></text></g><g><title>malloc (4 samples, 0.08%)</title><rect x="94.6725%" y="149" width="0.0801%" height="15" fill="rgb(239,167,4)" fg:x="4727" fg:w="4"/><text x="94.9225%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="94.7527%" y="229" width="0.0200%" height="15" fill="rgb(209,217,16)" fg:x="4731" fg:w="1"/><text x="95.0027%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="94.7527%" y="213" width="0.0200%" height="15" fill="rgb(219,88,35)" fg:x="4731" fg:w="1"/><text x="95.0027%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (37 samples, 0.74%)</title><rect x="94.0517%" y="325" width="0.7410%" height="15" fill="rgb(220,193,23)" fg:x="4696" fg:w="37"/><text x="94.3017%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (37 samples, 0.74%)</title><rect x="94.0517%" y="309" width="0.7410%" height="15" fill="rgb(230,90,52)" fg:x="4696" fg:w="37"/><text x="94.3017%" y="319.50"></text></g><g><title>alloc::string::String::push_str (37 samples, 0.74%)</title><rect x="94.0517%" y="293" width="0.7410%" height="15" fill="rgb(252,106,19)" fg:x="4696" fg:w="37"/><text x="94.3017%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (37 samples, 0.74%)</title><rect x="94.0517%" y="277" width="0.7410%" height="15" fill="rgb(206,74,20)" fg:x="4696" fg:w="37"/><text x="94.3017%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (37 samples, 0.74%)</title><rect x="94.0517%" y="261" width="0.7410%" height="15" fill="rgb(230,138,44)" fg:x="4696" fg:w="37"/><text x="94.3017%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (37 samples, 0.74%)</title><rect x="94.0517%" y="245" width="0.7410%" height="15" fill="rgb(235,182,43)" fg:x="4696" fg:w="37"/><text x="94.3017%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="94.7727%" y="229" width="0.0200%" height="15" fill="rgb(242,16,51)" fg:x="4732" fg:w="1"/><text x="95.0227%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="94.7727%" y="213" width="0.0200%" height="15" fill="rgb(248,9,4)" fg:x="4732" fg:w="1"/><text x="95.0227%" y="223.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.02%)</title><rect x="94.9129%" y="309" width="0.0200%" height="15" fill="rgb(210,31,22)" fg:x="4739" fg:w="1"/><text x="95.1629%" y="319.50"></text></g><g><title>core::fmt::Formatter::pad_integral (10 samples, 0.20%)</title><rect x="94.7927%" y="325" width="0.2003%" height="15" fill="rgb(239,54,39)" fg:x="4733" fg:w="10"/><text x="95.0427%" y="335.50"></text></g><g><title>core::fmt::Formatter::sign_plus (3 samples, 0.06%)</title><rect x="94.9329%" y="309" width="0.0601%" height="15" fill="rgb(230,99,41)" fg:x="4740" fg:w="3"/><text x="95.1829%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.04%)</title><rect x="94.9930%" y="325" width="0.0401%" height="15" fill="rgb(253,106,12)" fg:x="4743" fg:w="2"/><text x="95.2430%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (69 samples, 1.38%)</title><rect x="93.6711%" y="389" width="1.3819%" height="15" fill="rgb(213,46,41)" fg:x="4677" fg:w="69"/><text x="93.9211%" y="399.50"></text></g><g><title>core::fmt::write (67 samples, 1.34%)</title><rect x="93.7112%" y="373" width="1.3419%" height="15" fill="rgb(215,133,35)" fg:x="4679" fg:w="67"/><text x="93.9612%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (53 samples, 1.06%)</title><rect x="93.9916%" y="357" width="1.0615%" height="15" fill="rgb(213,28,5)" fg:x="4693" fg:w="53"/><text x="94.2416%" y="367.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (53 samples, 1.06%)</title><rect x="93.9916%" y="341" width="1.0615%" height="15" fill="rgb(215,77,49)" fg:x="4693" fg:w="53"/><text x="94.2416%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="95.0330%" y="325" width="0.0200%" height="15" fill="rgb(248,100,22)" fg:x="4745" fg:w="1"/><text x="95.2830%" y="335.50"></text></g><g><title>alloc::fmt::format (71 samples, 1.42%)</title><rect x="93.6511%" y="405" width="1.4220%" height="15" fill="rgb(208,67,9)" fg:x="4676" fg:w="71"/><text x="93.9011%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (1 samples, 0.02%)</title><rect x="95.0531%" y="389" width="0.0200%" height="15" fill="rgb(219,133,21)" fg:x="4746" fg:w="1"/><text x="95.3031%" y="399.50"></text></g><g><title>free (1 samples, 0.02%)</title><rect x="95.0731%" y="405" width="0.0200%" height="15" fill="rgb(246,46,29)" fg:x="4747" fg:w="1"/><text x="95.3231%" y="415.50"></text></g><g><title>_start (4,956 samples, 99.26%)</title><rect x="0.7210%" y="677" width="99.2590%" height="15" fill="rgb(246,185,52)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="687.50">_start</text></g><g><title>__libc_start_main (4,956 samples, 99.26%)</title><rect x="0.7210%" y="661" width="99.2590%" height="15" fill="rgb(252,136,11)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (4,956 samples, 99.26%)</title><rect x="0.7210%" y="645" width="99.2590%" height="15" fill="rgb(219,138,53)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="655.50">[libc.so.6]</text></g><g><title>main (4,956 samples, 99.26%)</title><rect x="0.7210%" y="629" width="99.2590%" height="15" fill="rgb(211,51,23)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (4,956 samples, 99.26%)</title><rect x="0.7210%" y="613" width="99.2590%" height="15" fill="rgb(247,221,28)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,956 samples, 99.26%)</title><rect x="0.7210%" y="597" width="99.2590%" height="15" fill="rgb(251,222,45)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,956 samples, 99.26%)</title><rect x="0.7210%" y="581" width="99.2590%" height="15" fill="rgb(217,162,53)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,956 samples, 99.26%)</title><rect x="0.7210%" y="565" width="99.2590%" height="15" fill="rgb(229,93,14)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4,956 samples, 99.26%)</title><rect x="0.7210%" y="549" width="99.2590%" height="15" fill="rgb(209,67,49)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (4,956 samples, 99.26%)</title><rect x="0.7210%" y="533" width="99.2590%" height="15" fill="rgb(213,87,29)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,956 samples, 99.26%)</title><rect x="0.7210%" y="517" width="99.2590%" height="15" fill="rgb(205,151,52)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,956 samples, 99.26%)</title><rect x="0.7210%" y="501" width="99.2590%" height="15" fill="rgb(253,215,39)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,956 samples, 99.26%)</title><rect x="0.7210%" y="485" width="99.2590%" height="15" fill="rgb(221,220,41)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (4,956 samples, 99.26%)</title><rect x="0.7210%" y="469" width="99.2590%" height="15" fill="rgb(218,133,21)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,956 samples, 99.26%)</title><rect x="0.7210%" y="453" width="99.2590%" height="15" fill="rgb(221,193,43)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ray_trace::main (4,956 samples, 99.26%)</title><rect x="0.7210%" y="437" width="99.2590%" height="15" fill="rgb(240,128,52)" fg:x="36" fg:w="4956"/><text x="0.9710%" y="447.50">ray_trace::main</text></g><g><title>ray_trace::render::write_color (324 samples, 6.49%)</title><rect x="93.4909%" y="421" width="6.4891%" height="15" fill="rgb(253,114,12)" fg:x="4668" fg:w="324"/><text x="93.7409%" y="431.50">ray_trac..</text></g><g><title>std::io::Write::write_all (244 samples, 4.89%)</title><rect x="95.0931%" y="405" width="4.8868%" height="15" fill="rgb(215,223,47)" fg:x="4748" fg:w="244"/><text x="95.3431%" y="415.50">std::i..</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (240 samples, 4.81%)</title><rect x="95.1732%" y="389" width="4.8067%" height="15" fill="rgb(248,225,23)" fg:x="4752" fg:w="240"/><text x="95.4232%" y="399.50">std::o..</text></g><g><title>std::sys::unix::net::Socket::write (239 samples, 4.79%)</title><rect x="95.1933%" y="373" width="4.7867%" height="15" fill="rgb(250,108,0)" fg:x="4753" fg:w="239"/><text x="95.4433%" y="383.50">std::s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (239 samples, 4.79%)</title><rect x="95.1933%" y="357" width="4.7867%" height="15" fill="rgb(228,208,7)" fg:x="4753" fg:w="239"/><text x="95.4433%" y="367.50">std::s..</text></g><g><title>write (238 samples, 4.77%)</title><rect x="95.2133%" y="341" width="4.7667%" height="15" fill="rgb(244,45,10)" fg:x="4754" fg:w="238"/><text x="95.4633%" y="351.50">write</text></g><g><title>[unknown] (236 samples, 4.73%)</title><rect x="95.2534%" y="325" width="4.7266%" height="15" fill="rgb(207,125,25)" fg:x="4756" fg:w="236"/><text x="95.5034%" y="335.50">[unkno..</text></g><g><title>[unknown] (235 samples, 4.71%)</title><rect x="95.2734%" y="309" width="4.7066%" height="15" fill="rgb(210,195,18)" fg:x="4757" fg:w="235"/><text x="95.5234%" y="319.50">[unkn..</text></g><g><title>[unknown] (232 samples, 4.65%)</title><rect x="95.3335%" y="293" width="4.6465%" height="15" fill="rgb(249,80,12)" fg:x="4760" fg:w="232"/><text x="95.5835%" y="303.50">[unkn..</text></g><g><title>[unknown] (228 samples, 4.57%)</title><rect x="95.4136%" y="277" width="4.5664%" height="15" fill="rgb(221,65,9)" fg:x="4764" fg:w="228"/><text x="95.6636%" y="287.50">[unkn..</text></g><g><title>[unknown] (181 samples, 3.63%)</title><rect x="96.3549%" y="261" width="3.6251%" height="15" fill="rgb(235,49,36)" fg:x="4811" fg:w="181"/><text x="96.6049%" y="271.50">[unk..</text></g><g><title>[unknown] (160 samples, 3.20%)</title><rect x="96.7755%" y="245" width="3.2045%" height="15" fill="rgb(225,32,20)" fg:x="4832" fg:w="160"/><text x="97.0255%" y="255.50">[un..</text></g><g><title>[unknown] (108 samples, 2.16%)</title><rect x="97.8169%" y="229" width="2.1630%" height="15" fill="rgb(215,141,46)" fg:x="4884" fg:w="108"/><text x="98.0669%" y="239.50">[..</text></g><g><title>[unknown] (77 samples, 1.54%)</title><rect x="98.4378%" y="213" width="1.5422%" height="15" fill="rgb(250,160,47)" fg:x="4915" fg:w="77"/><text x="98.6878%" y="223.50"></text></g><g><title>[unknown] (43 samples, 0.86%)</title><rect x="99.1188%" y="197" width="0.8612%" height="15" fill="rgb(216,222,40)" fg:x="4949" fg:w="43"/><text x="99.3688%" y="207.50"></text></g><g><title>[unknown] (13 samples, 0.26%)</title><rect x="99.7196%" y="181" width="0.2604%" height="15" fill="rgb(234,217,39)" fg:x="4979" fg:w="13"/><text x="99.9696%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.12%)</title><rect x="99.8598%" y="165" width="0.1202%" height="15" fill="rgb(207,178,40)" fg:x="4986" fg:w="6"/><text x="100.1098%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9599%" y="149" width="0.0200%" height="15" fill="rgb(221,136,13)" fg:x="4991" fg:w="1"/><text x="100.2099%" y="159.50"></text></g><g><title>all (4,993 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="4993"/><text x="0.2500%" y="719.50"></text></g><g><title>ray-trace (4,993 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="4993"/><text x="0.2500%" y="703.50">ray-trace</text></g><g><title>write (1 samples, 0.02%)</title><rect x="99.9800%" y="677" width="0.0200%" height="15" fill="rgb(244,185,38)" fg:x="4992" fg:w="1"/><text x="100.2300%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9800%" y="661" width="0.0200%" height="15" fill="rgb(236,202,9)" fg:x="4992" fg:w="1"/><text x="100.2300%" y="671.50"></text></g></svg></svg>