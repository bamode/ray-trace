<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="2289"><g><title>[[stack]] (14 samples, 0.61%)</title><rect x="0.0000%" y="645" width="0.6116%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="14"/><text x="0.2500%" y="655.50"></text></g><g><title>ioctl (14 samples, 0.61%)</title><rect x="0.0000%" y="629" width="0.6116%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="14"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (14 samples, 0.61%)</title><rect x="0.0000%" y="613" width="0.6116%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="14"/><text x="0.2500%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.6116%" y="581" width="0.0437%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="1"/><text x="0.8616%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.6116%" y="565" width="0.0437%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="1"/><text x="0.8616%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.6116%" y="549" width="0.0437%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="1"/><text x="0.8616%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="0.6116%" y="613" width="0.0874%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="2"/><text x="0.8616%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="0.6116%" y="597" width="0.0874%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="2"/><text x="0.8616%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.6553%" y="581" width="0.0437%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="1"/><text x="0.9053%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.6553%" y="565" width="0.0437%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="1"/><text x="0.9053%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.6553%" y="549" width="0.0437%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="1"/><text x="0.9053%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.6553%" y="533" width="0.0437%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="1"/><text x="0.9053%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.6553%" y="517" width="0.0437%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="1"/><text x="0.9053%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.22%)</title><rect x="0.6116%" y="629" width="0.2184%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="5"/><text x="0.8616%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.13%)</title><rect x="0.6990%" y="613" width="0.1311%" height="15" fill="rgb(217,207,13)" fg:x="16" fg:w="3"/><text x="0.9490%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="0.7427%" y="597" width="0.0874%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="2"/><text x="0.9927%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="0.7427%" y="581" width="0.0874%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="2"/><text x="0.9927%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="0.7427%" y="565" width="0.0874%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="2"/><text x="0.9927%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7864%" y="549" width="0.0437%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="1.0364%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7864%" y="533" width="0.0437%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="1"/><text x="1.0364%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.31%)</title><rect x="0.6116%" y="645" width="0.3058%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="7"/><text x="0.8616%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="0.8301%" y="629" width="0.0874%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="2"/><text x="1.0801%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.8737%" y="613" width="0.0437%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="1.1237%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.8737%" y="597" width="0.0437%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="1"/><text x="1.1237%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.8737%" y="581" width="0.0437%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="1"/><text x="1.1237%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.8737%" y="565" width="0.0437%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="1"/><text x="1.1237%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.8737%" y="549" width="0.0437%" height="15" fill="rgb(225,111,53)" fg:x="20" fg:w="1"/><text x="1.1237%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.8737%" y="533" width="0.0437%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="1"/><text x="1.1237%" y="543.50"></text></g><g><title>[unknown] (39 samples, 1.70%)</title><rect x="0.9174%" y="645" width="1.7038%" height="15" fill="rgb(214,148,48)" fg:x="21" fg:w="39"/><text x="1.1674%" y="655.50"></text></g><g><title>write (32 samples, 1.40%)</title><rect x="1.2232%" y="629" width="1.3980%" height="15" fill="rgb(232,36,49)" fg:x="28" fg:w="32"/><text x="1.4732%" y="639.50"></text></g><g><title>[unknown] (32 samples, 1.40%)</title><rect x="1.2232%" y="613" width="1.3980%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="32"/><text x="1.4732%" y="623.50"></text></g><g><title>&lt;ray_trace::sphere::Sphere as ray_trace::hit::Hit&gt;::hit (71 samples, 3.10%)</title><rect x="4.2813%" y="389" width="3.1018%" height="15" fill="rgb(229,88,8)" fg:x="98" fg:w="71"/><text x="4.5313%" y="399.50">&lt;ra..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (101 samples, 4.41%)</title><rect x="8.5627%" y="341" width="4.4124%" height="15" fill="rgb(213,181,19)" fg:x="196" fg:w="101"/><text x="8.8127%" y="351.50">&lt;std:..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (101 samples, 4.41%)</title><rect x="8.5627%" y="325" width="4.4124%" height="15" fill="rgb(254,191,54)" fg:x="196" fg:w="101"/><text x="8.8127%" y="335.50">&lt;std:..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (101 samples, 4.41%)</title><rect x="8.5627%" y="309" width="4.4124%" height="15" fill="rgb(241,83,37)" fg:x="196" fg:w="101"/><text x="8.8127%" y="319.50">&lt;std:..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (101 samples, 4.41%)</title><rect x="8.5627%" y="293" width="4.4124%" height="15" fill="rgb(233,36,39)" fg:x="196" fg:w="101"/><text x="8.8127%" y="303.50">std::..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (100 samples, 4.37%)</title><rect x="8.6064%" y="277" width="4.3687%" height="15" fill="rgb(226,3,54)" fg:x="197" fg:w="100"/><text x="8.8564%" y="287.50">&lt;std:..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (100 samples, 4.37%)</title><rect x="8.6064%" y="261" width="4.3687%" height="15" fill="rgb(245,192,40)" fg:x="197" fg:w="100"/><text x="8.8564%" y="271.50">&lt;std:..</text></g><g><title>std::sys::unix::fd::FileDesc::write (100 samples, 4.37%)</title><rect x="8.6064%" y="245" width="4.3687%" height="15" fill="rgb(238,167,29)" fg:x="197" fg:w="100"/><text x="8.8564%" y="255.50">std::..</text></g><g><title>write (100 samples, 4.37%)</title><rect x="8.6064%" y="229" width="4.3687%" height="15" fill="rgb(232,182,51)" fg:x="197" fg:w="100"/><text x="8.8564%" y="239.50">write</text></g><g><title>[unknown] (100 samples, 4.37%)</title><rect x="8.6064%" y="213" width="4.3687%" height="15" fill="rgb(231,60,39)" fg:x="197" fg:w="100"/><text x="8.8564%" y="223.50">[unkn..</text></g><g><title>[unknown] (96 samples, 4.19%)</title><rect x="8.7811%" y="197" width="4.1940%" height="15" fill="rgb(208,69,12)" fg:x="201" fg:w="96"/><text x="9.0311%" y="207.50">[unkn..</text></g><g><title>[unknown] (90 samples, 3.93%)</title><rect x="9.0433%" y="181" width="3.9318%" height="15" fill="rgb(235,93,37)" fg:x="207" fg:w="90"/><text x="9.2933%" y="191.50">[unk..</text></g><g><title>[unknown] (84 samples, 3.67%)</title><rect x="9.3054%" y="165" width="3.6697%" height="15" fill="rgb(213,116,39)" fg:x="213" fg:w="84"/><text x="9.5554%" y="175.50">[unk..</text></g><g><title>[unknown] (80 samples, 3.49%)</title><rect x="9.4801%" y="149" width="3.4950%" height="15" fill="rgb(222,207,29)" fg:x="217" fg:w="80"/><text x="9.7301%" y="159.50">[un..</text></g><g><title>[unknown] (69 samples, 3.01%)</title><rect x="9.9607%" y="133" width="3.0144%" height="15" fill="rgb(206,96,30)" fg:x="228" fg:w="69"/><text x="10.2107%" y="143.50">[un..</text></g><g><title>[unknown] (47 samples, 2.05%)</title><rect x="10.9218%" y="117" width="2.0533%" height="15" fill="rgb(218,138,4)" fg:x="250" fg:w="47"/><text x="11.1718%" y="127.50">[..</text></g><g><title>[unknown] (37 samples, 1.62%)</title><rect x="11.3587%" y="101" width="1.6164%" height="15" fill="rgb(250,191,14)" fg:x="260" fg:w="37"/><text x="11.6087%" y="111.50"></text></g><g><title>[unknown] (10 samples, 0.44%)</title><rect x="12.5382%" y="85" width="0.4369%" height="15" fill="rgb(239,60,40)" fg:x="287" fg:w="10"/><text x="12.7882%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (3 samples, 0.13%)</title><rect x="12.9751%" y="341" width="0.1311%" height="15" fill="rgb(206,27,48)" fg:x="297" fg:w="3"/><text x="13.2251%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (3 samples, 0.13%)</title><rect x="12.9751%" y="325" width="0.1311%" height="15" fill="rgb(225,35,8)" fg:x="297" fg:w="3"/><text x="13.2251%" y="335.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="12.9751%" y="309" width="0.1311%" height="15" fill="rgb(250,213,24)" fg:x="297" fg:w="3"/><text x="13.2251%" y="319.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (3 samples, 0.13%)</title><rect x="12.9751%" y="293" width="0.1311%" height="15" fill="rgb(247,123,22)" fg:x="297" fg:w="3"/><text x="13.2251%" y="303.50"></text></g><g><title>pthread_mutex_unlock (3 samples, 0.13%)</title><rect x="12.9751%" y="277" width="0.1311%" height="15" fill="rgb(231,138,38)" fg:x="297" fg:w="3"/><text x="13.2251%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (109 samples, 4.76%)</title><rect x="8.5627%" y="373" width="4.7619%" height="15" fill="rgb(231,145,46)" fg:x="196" fg:w="109"/><text x="8.8127%" y="383.50">&lt;std::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (109 samples, 4.76%)</title><rect x="8.5627%" y="357" width="4.7619%" height="15" fill="rgb(251,118,11)" fg:x="196" fg:w="109"/><text x="8.8127%" y="367.50">&lt;&amp;std:..</text></g><g><title>std::io::stdio::Stdout::lock (5 samples, 0.22%)</title><rect x="13.1062%" y="341" width="0.2184%" height="15" fill="rgb(217,147,25)" fg:x="300" fg:w="5"/><text x="13.3562%" y="351.50"></text></g><g><title>std::io::stdio::Stdout::lock_any (5 samples, 0.22%)</title><rect x="13.1062%" y="325" width="0.2184%" height="15" fill="rgb(247,81,37)" fg:x="300" fg:w="5"/><text x="13.3562%" y="335.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (5 samples, 0.22%)</title><rect x="13.1062%" y="309" width="0.2184%" height="15" fill="rgb(209,12,38)" fg:x="300" fg:w="5"/><text x="13.3562%" y="319.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (5 samples, 0.22%)</title><rect x="13.1062%" y="293" width="0.2184%" height="15" fill="rgb(227,1,9)" fg:x="300" fg:w="5"/><text x="13.3562%" y="303.50"></text></g><g><title>pthread_mutex_lock (5 samples, 0.22%)</title><rect x="13.1062%" y="277" width="0.2184%" height="15" fill="rgb(248,47,43)" fg:x="300" fg:w="5"/><text x="13.3562%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="19.0913%" y="357" width="0.0437%" height="15" fill="rgb(221,10,30)" fg:x="437" fg:w="1"/><text x="19.3413%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="19.0913%" y="341" width="0.0437%" height="15" fill="rgb(210,229,1)" fg:x="437" fg:w="1"/><text x="19.3413%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="19.0913%" y="325" width="0.0437%" height="15" fill="rgb(222,148,37)" fg:x="437" fg:w="1"/><text x="19.3413%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (56 samples, 2.45%)</title><rect x="22.1057%" y="309" width="2.4465%" height="15" fill="rgb(234,67,33)" fg:x="506" fg:w="56"/><text x="22.3557%" y="319.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (56 samples, 2.45%)</title><rect x="22.1057%" y="293" width="2.4465%" height="15" fill="rgb(247,98,35)" fg:x="506" fg:w="56"/><text x="22.3557%" y="303.50">co..</text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 2.45%)</title><rect x="22.1057%" y="277" width="2.4465%" height="15" fill="rgb(247,138,52)" fg:x="506" fg:w="56"/><text x="22.3557%" y="287.50">&lt;s..</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (56 samples, 2.45%)</title><rect x="22.1057%" y="261" width="2.4465%" height="15" fill="rgb(213,79,30)" fg:x="506" fg:w="56"/><text x="22.3557%" y="271.50">st..</text></g><g><title>pthread_mutex_unlock (55 samples, 2.40%)</title><rect x="22.1494%" y="245" width="2.4028%" height="15" fill="rgb(246,177,23)" fg:x="507" fg:w="55"/><text x="22.3994%" y="255.50">pt..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (49 samples, 2.14%)</title><rect x="27.1734%" y="277" width="2.1407%" height="15" fill="rgb(230,62,27)" fg:x="622" fg:w="49"/><text x="27.4234%" y="287.50">&lt;..</text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="29.2704%" y="261" width="0.0437%" height="15" fill="rgb(216,154,8)" fg:x="670" fg:w="1"/><text x="29.5204%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (6 samples, 0.26%)</title><rect x="29.3141%" y="277" width="0.2621%" height="15" fill="rgb(244,35,45)" fg:x="671" fg:w="6"/><text x="29.5641%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 1.09%)</title><rect x="29.5762%" y="277" width="1.0922%" height="15" fill="rgb(251,115,12)" fg:x="677" fg:w="25"/><text x="29.8262%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 1.09%)</title><rect x="29.5762%" y="261" width="1.0922%" height="15" fill="rgb(240,54,50)" fg:x="677" fg:w="25"/><text x="29.8262%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (2 samples, 0.09%)</title><rect x="32.6780%" y="197" width="0.0874%" height="15" fill="rgb(233,84,52)" fg:x="748" fg:w="2"/><text x="32.9280%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (2 samples, 0.09%)</title><rect x="32.6780%" y="181" width="0.0874%" height="15" fill="rgb(207,117,47)" fg:x="748" fg:w="2"/><text x="32.9280%" y="191.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (30 samples, 1.31%)</title><rect x="32.6780%" y="213" width="1.3106%" height="15" fill="rgb(249,43,39)" fg:x="748" fg:w="30"/><text x="32.9280%" y="223.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (28 samples, 1.22%)</title><rect x="32.7654%" y="197" width="1.2232%" height="15" fill="rgb(209,38,44)" fg:x="750" fg:w="28"/><text x="33.0154%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 1.18%)</title><rect x="32.8091%" y="181" width="1.1796%" height="15" fill="rgb(236,212,23)" fg:x="751" fg:w="27"/><text x="33.0591%" y="191.50"></text></g><g><title>[libc.so.6] (22 samples, 0.96%)</title><rect x="33.0275%" y="165" width="0.9611%" height="15" fill="rgb(242,79,21)" fg:x="756" fg:w="22"/><text x="33.2775%" y="175.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (5 samples, 0.22%)</title><rect x="33.9886%" y="213" width="0.2184%" height="15" fill="rgb(211,96,35)" fg:x="778" fg:w="5"/><text x="34.2386%" y="223.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (5 samples, 0.22%)</title><rect x="33.9886%" y="197" width="0.2184%" height="15" fill="rgb(253,215,40)" fg:x="778" fg:w="5"/><text x="34.2386%" y="207.50"></text></g><g><title>[libc.so.6] (63 samples, 2.75%)</title><rect x="34.4692%" y="165" width="2.7523%" height="15" fill="rgb(211,81,21)" fg:x="789" fg:w="63"/><text x="34.7192%" y="175.50">[l..</text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.1778%" y="149" width="0.0437%" height="15" fill="rgb(208,190,38)" fg:x="851" fg:w="1"/><text x="37.4278%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.1778%" y="133" width="0.0437%" height="15" fill="rgb(235,213,38)" fg:x="851" fg:w="1"/><text x="37.4278%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.1778%" y="117" width="0.0437%" height="15" fill="rgb(237,122,38)" fg:x="851" fg:w="1"/><text x="37.4278%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.1778%" y="101" width="0.0437%" height="15" fill="rgb(244,218,35)" fg:x="851" fg:w="1"/><text x="37.4278%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.1778%" y="85" width="0.0437%" height="15" fill="rgb(240,68,47)" fg:x="851" fg:w="1"/><text x="37.4278%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.1778%" y="69" width="0.0437%" height="15" fill="rgb(210,16,53)" fg:x="851" fg:w="1"/><text x="37.4278%" y="79.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (105 samples, 4.59%)</title><rect x="32.6780%" y="245" width="4.5872%" height="15" fill="rgb(235,124,12)" fg:x="748" fg:w="105"/><text x="32.9280%" y="255.50">&lt;std:..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (105 samples, 4.59%)</title><rect x="32.6780%" y="229" width="4.5872%" height="15" fill="rgb(224,169,11)" fg:x="748" fg:w="105"/><text x="32.9280%" y="239.50">&lt;std:..</text></g><g><title>std::sys_common::memchr::memrchr (70 samples, 3.06%)</title><rect x="34.2071%" y="213" width="3.0581%" height="15" fill="rgb(250,166,2)" fg:x="783" fg:w="70"/><text x="34.4571%" y="223.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr (70 samples, 3.06%)</title><rect x="34.2071%" y="197" width="3.0581%" height="15" fill="rgb(242,216,29)" fg:x="783" fg:w="70"/><text x="34.4571%" y="207.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (70 samples, 3.06%)</title><rect x="34.2071%" y="181" width="3.0581%" height="15" fill="rgb(230,116,27)" fg:x="783" fg:w="70"/><text x="34.4571%" y="191.50">std..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.04%)</title><rect x="37.2215%" y="165" width="0.0437%" height="15" fill="rgb(228,99,48)" fg:x="852" fg:w="1"/><text x="37.4715%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.04%)</title><rect x="37.2215%" y="149" width="0.0437%" height="15" fill="rgb(253,11,6)" fg:x="852" fg:w="1"/><text x="37.4715%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (165 samples, 7.21%)</title><rect x="30.6684%" y="277" width="7.2084%" height="15" fill="rgb(247,143,39)" fg:x="702" fg:w="165"/><text x="30.9184%" y="287.50">&lt;std::io::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (154 samples, 6.73%)</title><rect x="31.1490%" y="261" width="6.7278%" height="15" fill="rgb(236,97,10)" fg:x="713" fg:w="154"/><text x="31.3990%" y="271.50">&lt;std::io:..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (14 samples, 0.61%)</title><rect x="37.2652%" y="245" width="0.6116%" height="15" fill="rgb(233,208,19)" fg:x="853" fg:w="14"/><text x="37.5152%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (14 samples, 0.61%)</title><rect x="37.2652%" y="229" width="0.6116%" height="15" fill="rgb(216,164,2)" fg:x="853" fg:w="14"/><text x="37.5152%" y="239.50"></text></g><g><title>core::cell::BorrowRefMut::new (14 samples, 0.61%)</title><rect x="37.2652%" y="213" width="0.6116%" height="15" fill="rgb(220,129,5)" fg:x="853" fg:w="14"/><text x="37.5152%" y="223.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.04%)</title><rect x="37.8768%" y="277" width="0.0437%" height="15" fill="rgb(242,17,10)" fg:x="867" fg:w="1"/><text x="38.1268%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.9205%" y="277" width="0.0437%" height="15" fill="rgb(242,107,0)" fg:x="868" fg:w="1"/><text x="38.1705%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.9205%" y="261" width="0.0437%" height="15" fill="rgb(251,28,31)" fg:x="868" fg:w="1"/><text x="38.1705%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.9205%" y="245" width="0.0437%" height="15" fill="rgb(233,223,10)" fg:x="868" fg:w="1"/><text x="38.1705%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.9205%" y="229" width="0.0437%" height="15" fill="rgb(215,21,27)" fg:x="868" fg:w="1"/><text x="38.1705%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.9205%" y="213" width="0.0437%" height="15" fill="rgb(232,23,21)" fg:x="868" fg:w="1"/><text x="38.1705%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="37.9205%" y="197" width="0.0437%" height="15" fill="rgb(244,5,23)" fg:x="868" fg:w="1"/><text x="38.1705%" y="207.50"></text></g><g><title>core::fmt::Formatter::new (3 samples, 0.13%)</title><rect x="37.9642%" y="277" width="0.1311%" height="15" fill="rgb(226,81,46)" fg:x="869" fg:w="3"/><text x="38.2142%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad (15 samples, 0.66%)</title><rect x="38.0952%" y="277" width="0.6553%" height="15" fill="rgb(247,70,30)" fg:x="872" fg:w="15"/><text x="38.3452%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.04%)</title><rect x="38.7069%" y="261" width="0.0437%" height="15" fill="rgb(212,68,19)" fg:x="886" fg:w="1"/><text x="38.9569%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.04%)</title><rect x="38.7069%" y="245" width="0.0437%" height="15" fill="rgb(240,187,13)" fg:x="886" fg:w="1"/><text x="38.9569%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="38.7069%" y="229" width="0.0437%" height="15" fill="rgb(223,113,26)" fg:x="886" fg:w="1"/><text x="38.9569%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="38.7069%" y="213" width="0.0437%" height="15" fill="rgb(206,192,2)" fg:x="886" fg:w="1"/><text x="38.9569%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="38.7069%" y="197" width="0.0437%" height="15" fill="rgb(241,108,4)" fg:x="886" fg:w="1"/><text x="38.9569%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="38.7069%" y="181" width="0.0437%" height="15" fill="rgb(247,173,49)" fg:x="886" fg:w="1"/><text x="38.9569%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="38.7069%" y="165" width="0.0437%" height="15" fill="rgb(224,114,35)" fg:x="886" fg:w="1"/><text x="38.9569%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="38.7069%" y="149" width="0.0437%" height="15" fill="rgb(245,159,27)" fg:x="886" fg:w="1"/><text x="38.9569%" y="159.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.04%)</title><rect x="38.7942%" y="261" width="0.0437%" height="15" fill="rgb(245,172,44)" fg:x="888" fg:w="1"/><text x="39.0442%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.04%)</title><rect x="38.9253%" y="245" width="0.0437%" height="15" fill="rgb(236,23,11)" fg:x="891" fg:w="1"/><text x="39.1753%" y="255.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.04%)</title><rect x="38.9253%" y="229" width="0.0437%" height="15" fill="rgb(205,117,38)" fg:x="891" fg:w="1"/><text x="39.1753%" y="239.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.04%)</title><rect x="38.9253%" y="213" width="0.0437%" height="15" fill="rgb(237,72,25)" fg:x="891" fg:w="1"/><text x="39.1753%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.04%)</title><rect x="38.9253%" y="197" width="0.0437%" height="15" fill="rgb(244,70,9)" fg:x="891" fg:w="1"/><text x="39.1753%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.04%)</title><rect x="38.9253%" y="181" width="0.0437%" height="15" fill="rgb(217,125,39)" fg:x="891" fg:w="1"/><text x="39.1753%" y="191.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.04%)</title><rect x="38.9253%" y="165" width="0.0437%" height="15" fill="rgb(235,36,10)" fg:x="891" fg:w="1"/><text x="39.1753%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="38.9253%" y="149" width="0.0437%" height="15" fill="rgb(251,123,47)" fg:x="891" fg:w="1"/><text x="39.1753%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="38.9253%" y="133" width="0.0437%" height="15" fill="rgb(221,13,13)" fg:x="891" fg:w="1"/><text x="39.1753%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="38.9253%" y="117" width="0.0437%" height="15" fill="rgb(238,131,9)" fg:x="891" fg:w="1"/><text x="39.1753%" y="127.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.13%)</title><rect x="39.0127%" y="181" width="0.1311%" height="15" fill="rgb(211,50,8)" fg:x="893" fg:w="3"/><text x="39.2627%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (3 samples, 0.13%)</title><rect x="39.0127%" y="165" width="0.1311%" height="15" fill="rgb(245,182,24)" fg:x="893" fg:w="3"/><text x="39.2627%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.13%)</title><rect x="39.0127%" y="149" width="0.1311%" height="15" fill="rgb(242,14,37)" fg:x="893" fg:w="3"/><text x="39.2627%" y="159.50"></text></g><g><title>[libc.so.6] (3 samples, 0.13%)</title><rect x="39.0127%" y="133" width="0.1311%" height="15" fill="rgb(246,228,12)" fg:x="893" fg:w="3"/><text x="39.2627%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="39.1000%" y="117" width="0.0437%" height="15" fill="rgb(213,55,15)" fg:x="895" fg:w="1"/><text x="39.3500%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="39.1000%" y="101" width="0.0437%" height="15" fill="rgb(209,9,3)" fg:x="895" fg:w="1"/><text x="39.3500%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="39.1000%" y="85" width="0.0437%" height="15" fill="rgb(230,59,30)" fg:x="895" fg:w="1"/><text x="39.3500%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="39.1000%" y="69" width="0.0437%" height="15" fill="rgb(209,121,21)" fg:x="895" fg:w="1"/><text x="39.3500%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="39.1000%" y="53" width="0.0437%" height="15" fill="rgb(220,109,13)" fg:x="895" fg:w="1"/><text x="39.3500%" y="63.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.22%)</title><rect x="38.9690%" y="245" width="0.2184%" height="15" fill="rgb(232,18,1)" fg:x="892" fg:w="5"/><text x="39.2190%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.22%)</title><rect x="38.9690%" y="229" width="0.2184%" height="15" fill="rgb(215,41,42)" fg:x="892" fg:w="5"/><text x="39.2190%" y="239.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.17%)</title><rect x="39.0127%" y="213" width="0.1747%" height="15" fill="rgb(224,123,36)" fg:x="893" fg:w="4"/><text x="39.2627%" y="223.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.17%)</title><rect x="39.0127%" y="197" width="0.1747%" height="15" fill="rgb(240,125,3)" fg:x="893" fg:w="4"/><text x="39.2627%" y="207.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (1 samples, 0.04%)</title><rect x="39.1437%" y="181" width="0.0437%" height="15" fill="rgb(205,98,50)" fg:x="896" fg:w="1"/><text x="39.3937%" y="191.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (1 samples, 0.04%)</title><rect x="39.1437%" y="165" width="0.0437%" height="15" fill="rgb(205,185,37)" fg:x="896" fg:w="1"/><text x="39.3937%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (44 samples, 1.92%)</title><rect x="44.2114%" y="149" width="1.9222%" height="15" fill="rgb(238,207,15)" fg:x="1012" fg:w="44"/><text x="44.4614%" y="159.50">&lt;..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (44 samples, 1.92%)</title><rect x="44.2114%" y="133" width="1.9222%" height="15" fill="rgb(213,199,42)" fg:x="1012" fg:w="44"/><text x="44.4614%" y="143.50">s..</text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 1.88%)</title><rect x="44.2551%" y="117" width="1.8785%" height="15" fill="rgb(235,201,11)" fg:x="1013" fg:w="43"/><text x="44.5051%" y="127.50">c..</text></g><g><title>[libc.so.6] (33 samples, 1.44%)</title><rect x="44.6920%" y="101" width="1.4417%" height="15" fill="rgb(207,46,11)" fg:x="1023" fg:w="33"/><text x="44.9420%" y="111.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (9 samples, 0.39%)</title><rect x="46.1337%" y="133" width="0.3932%" height="15" fill="rgb(241,35,35)" fg:x="1056" fg:w="9"/><text x="46.3837%" y="143.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (11 samples, 0.48%)</title><rect x="46.1337%" y="149" width="0.4806%" height="15" fill="rgb(243,32,47)" fg:x="1056" fg:w="11"/><text x="46.3837%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2 samples, 0.09%)</title><rect x="46.5269%" y="133" width="0.0874%" height="15" fill="rgb(247,202,23)" fg:x="1065" fg:w="2"/><text x="46.7769%" y="143.50"></text></g><g><title>[libc.so.6] (320 samples, 13.98%)</title><rect x="46.9201%" y="101" width="13.9799%" height="15" fill="rgb(219,102,11)" fg:x="1074" fg:w="320"/><text x="47.1701%" y="111.50">[libc.so.6]</text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="60.8563%" y="85" width="0.0437%" height="15" fill="rgb(243,110,44)" fg:x="1393" fg:w="1"/><text x="61.1063%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="60.8563%" y="69" width="0.0437%" height="15" fill="rgb(222,74,54)" fg:x="1393" fg:w="1"/><text x="61.1063%" y="79.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (383 samples, 16.73%)</title><rect x="44.2114%" y="181" width="16.7322%" height="15" fill="rgb(216,99,12)" fg:x="1012" fg:w="383"/><text x="44.4614%" y="191.50">&lt;std::io::buffered::linewr..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (383 samples, 16.73%)</title><rect x="44.2114%" y="165" width="16.7322%" height="15" fill="rgb(226,22,26)" fg:x="1012" fg:w="383"/><text x="44.4614%" y="175.50">&lt;std::io::buffered::linewr..</text></g><g><title>std::sys_common::memchr::memrchr (328 samples, 14.33%)</title><rect x="46.6142%" y="149" width="14.3294%" height="15" fill="rgb(217,163,10)" fg:x="1067" fg:w="328"/><text x="46.8642%" y="159.50">std::sys_common::memch..</text></g><g><title>std::sys::unix::memchr::memrchr (328 samples, 14.33%)</title><rect x="46.6142%" y="133" width="14.3294%" height="15" fill="rgb(213,25,53)" fg:x="1067" fg:w="328"/><text x="46.8642%" y="143.50">std::sys::unix::memchr..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (328 samples, 14.33%)</title><rect x="46.6142%" y="117" width="14.3294%" height="15" fill="rgb(252,105,26)" fg:x="1067" fg:w="328"/><text x="46.8642%" y="127.50">std::sys::unix::memchr..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.04%)</title><rect x="60.9000%" y="101" width="0.0437%" height="15" fill="rgb(220,39,43)" fg:x="1394" fg:w="1"/><text x="61.1500%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="60.9436%" y="181" width="0.0437%" height="15" fill="rgb(229,68,48)" fg:x="1395" fg:w="1"/><text x="61.1936%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="60.9436%" y="165" width="0.0437%" height="15" fill="rgb(252,8,32)" fg:x="1395" fg:w="1"/><text x="61.1936%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="60.9436%" y="149" width="0.0437%" height="15" fill="rgb(223,20,43)" fg:x="1395" fg:w="1"/><text x="61.1936%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="60.9436%" y="133" width="0.0437%" height="15" fill="rgb(229,81,49)" fg:x="1395" fg:w="1"/><text x="61.1936%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="60.9436%" y="117" width="0.0437%" height="15" fill="rgb(236,28,36)" fg:x="1395" fg:w="1"/><text x="61.1936%" y="127.50"></text></g><g><title>core::cell::BorrowRefMut::new (21 samples, 0.92%)</title><rect x="60.9873%" y="149" width="0.9174%" height="15" fill="rgb(249,185,26)" fg:x="1396" fg:w="21"/><text x="61.2373%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (480 samples, 20.97%)</title><rect x="40.9786%" y="213" width="20.9699%" height="15" fill="rgb(249,174,33)" fg:x="938" fg:w="480"/><text x="41.2286%" y="223.50">&lt;std::io::Write::write_fmt::Adapt..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (473 samples, 20.66%)</title><rect x="41.2844%" y="197" width="20.6640%" height="15" fill="rgb(233,201,37)" fg:x="945" fg:w="473"/><text x="41.5344%" y="207.50">&lt;std::io::stdio::StdoutLock as st..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (22 samples, 0.96%)</title><rect x="60.9873%" y="181" width="0.9611%" height="15" fill="rgb(221,78,26)" fg:x="1396" fg:w="22"/><text x="61.2373%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (22 samples, 0.96%)</title><rect x="60.9873%" y="165" width="0.9611%" height="15" fill="rgb(250,127,30)" fg:x="1396" fg:w="22"/><text x="61.2373%" y="175.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="61.9048%" y="149" width="0.0437%" height="15" fill="rgb(230,49,44)" fg:x="1417" fg:w="1"/><text x="62.1548%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="61.9484%" y="213" width="0.0437%" height="15" fill="rgb(229,67,23)" fg:x="1418" fg:w="1"/><text x="62.1984%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="61.9484%" y="197" width="0.0437%" height="15" fill="rgb(249,83,47)" fg:x="1418" fg:w="1"/><text x="62.1984%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="61.9484%" y="181" width="0.0437%" height="15" fill="rgb(215,43,3)" fg:x="1418" fg:w="1"/><text x="62.1984%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="61.9484%" y="165" width="0.0437%" height="15" fill="rgb(238,154,13)" fg:x="1418" fg:w="1"/><text x="62.1984%" y="175.50"></text></g><g><title>core::fmt::Write::write_char (533 samples, 23.29%)</title><rect x="39.4495%" y="229" width="23.2853%" height="15" fill="rgb(219,56,2)" fg:x="903" fg:w="533"/><text x="39.6995%" y="239.50">core::fmt::Write::write_char</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (17 samples, 0.74%)</title><rect x="61.9921%" y="213" width="0.7427%" height="15" fill="rgb(233,0,4)" fg:x="1419" fg:w="17"/><text x="62.2421%" y="223.50"></text></g><g><title>core::char::methods::encode_utf8_raw (17 samples, 0.74%)</title><rect x="61.9921%" y="197" width="0.7427%" height="15" fill="rgb(235,30,7)" fg:x="1419" fg:w="17"/><text x="62.2421%" y="207.50"></text></g><g><title>core::char::methods::len_utf8 (2 samples, 0.09%)</title><rect x="62.6474%" y="181" width="0.0874%" height="15" fill="rgb(250,79,13)" fg:x="1434" fg:w="2"/><text x="62.8974%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad (557 samples, 24.33%)</title><rect x="38.8379%" y="261" width="24.3338%" height="15" fill="rgb(211,146,34)" fg:x="889" fg:w="557"/><text x="39.0879%" y="271.50">core::fmt::Formatter::pad</text></g><g><title>core::fmt::PostPadding::write (549 samples, 23.98%)</title><rect x="39.1874%" y="245" width="23.9843%" height="15" fill="rgb(228,22,38)" fg:x="897" fg:w="549"/><text x="39.4374%" y="255.50">core::fmt::PostPadding::write</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.44%)</title><rect x="62.7348%" y="229" width="0.4369%" height="15" fill="rgb(235,168,5)" fg:x="1436" fg:w="10"/><text x="62.9848%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.44%)</title><rect x="62.7348%" y="213" width="0.4369%" height="15" fill="rgb(221,155,16)" fg:x="1436" fg:w="10"/><text x="62.9848%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (10 samples, 0.44%)</title><rect x="62.7348%" y="197" width="0.4369%" height="15" fill="rgb(215,215,53)" fg:x="1436" fg:w="10"/><text x="62.9848%" y="207.50"></text></g><g><title>core::fmt::getcount (1 samples, 0.04%)</title><rect x="63.1717%" y="261" width="0.0437%" height="15" fill="rgb(223,4,10)" fg:x="1446" fg:w="1"/><text x="63.4217%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.22%)</title><rect x="63.8707%" y="149" width="0.2184%" height="15" fill="rgb(234,103,6)" fg:x="1462" fg:w="5"/><text x="64.1207%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (4 samples, 0.17%)</title><rect x="63.9144%" y="133" width="0.1747%" height="15" fill="rgb(227,97,0)" fg:x="1463" fg:w="4"/><text x="64.1644%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.17%)</title><rect x="63.9144%" y="117" width="0.1747%" height="15" fill="rgb(234,150,53)" fg:x="1463" fg:w="4"/><text x="64.1644%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.17%)</title><rect x="63.9144%" y="101" width="0.1747%" height="15" fill="rgb(228,201,54)" fg:x="1463" fg:w="4"/><text x="64.1644%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="64.0454%" y="85" width="0.0437%" height="15" fill="rgb(222,22,37)" fg:x="1466" fg:w="1"/><text x="64.2954%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="64.0454%" y="69" width="0.0437%" height="15" fill="rgb(237,53,32)" fg:x="1466" fg:w="1"/><text x="64.2954%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="64.0454%" y="53" width="0.0437%" height="15" fill="rgb(233,25,53)" fg:x="1466" fg:w="1"/><text x="64.2954%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="64.0454%" y="37" width="0.0437%" height="15" fill="rgb(210,40,34)" fg:x="1466" fg:w="1"/><text x="64.2954%" y="47.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="64.0891%" y="101" width="0.0437%" height="15" fill="rgb(241,220,44)" fg:x="1467" fg:w="1"/><text x="64.3391%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (11 samples, 0.48%)</title><rect x="63.6959%" y="213" width="0.4806%" height="15" fill="rgb(235,28,35)" fg:x="1458" fg:w="11"/><text x="63.9459%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (8 samples, 0.35%)</title><rect x="63.8270%" y="197" width="0.3495%" height="15" fill="rgb(210,56,17)" fg:x="1461" fg:w="8"/><text x="64.0770%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.31%)</title><rect x="63.8707%" y="181" width="0.3058%" height="15" fill="rgb(224,130,29)" fg:x="1462" fg:w="7"/><text x="64.1207%" y="191.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.31%)</title><rect x="63.8707%" y="165" width="0.3058%" height="15" fill="rgb(235,212,8)" fg:x="1462" fg:w="7"/><text x="64.1207%" y="175.50"></text></g><g><title>std::sys_common::memchr::memrchr (2 samples, 0.09%)</title><rect x="64.0891%" y="149" width="0.0874%" height="15" fill="rgb(223,33,50)" fg:x="1467" fg:w="2"/><text x="64.3391%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.09%)</title><rect x="64.0891%" y="133" width="0.0874%" height="15" fill="rgb(219,149,13)" fg:x="1467" fg:w="2"/><text x="64.3391%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.09%)</title><rect x="64.0891%" y="117" width="0.0874%" height="15" fill="rgb(250,156,29)" fg:x="1467" fg:w="2"/><text x="64.3391%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.04%)</title><rect x="64.1328%" y="101" width="0.0437%" height="15" fill="rgb(216,193,19)" fg:x="1468" fg:w="1"/><text x="64.3828%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.04%)</title><rect x="64.1328%" y="85" width="0.0437%" height="15" fill="rgb(216,135,14)" fg:x="1468" fg:w="1"/><text x="64.3828%" y="95.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.09%)</title><rect x="64.1765%" y="213" width="0.0874%" height="15" fill="rgb(241,47,5)" fg:x="1469" fg:w="2"/><text x="64.4265%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.17%)</title><rect x="65.0502%" y="117" width="0.1747%" height="15" fill="rgb(233,42,35)" fg:x="1489" fg:w="4"/><text x="65.3002%" y="127.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (4 samples, 0.17%)</title><rect x="65.0502%" y="101" width="0.1747%" height="15" fill="rgb(231,13,6)" fg:x="1489" fg:w="4"/><text x="65.3002%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.17%)</title><rect x="65.0502%" y="85" width="0.1747%" height="15" fill="rgb(207,181,40)" fg:x="1489" fg:w="4"/><text x="65.3002%" y="95.50"></text></g><g><title>[libc.so.6] (4 samples, 0.17%)</title><rect x="65.0502%" y="69" width="0.1747%" height="15" fill="rgb(254,173,49)" fg:x="1489" fg:w="4"/><text x="65.3002%" y="79.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (1 samples, 0.04%)</title><rect x="65.2250%" y="117" width="0.0437%" height="15" fill="rgb(221,1,38)" fg:x="1493" fg:w="1"/><text x="65.4750%" y="127.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (1 samples, 0.04%)</title><rect x="65.2250%" y="101" width="0.0437%" height="15" fill="rgb(206,124,46)" fg:x="1493" fg:w="1"/><text x="65.4750%" y="111.50"></text></g><g><title>core::fmt::Formatter::padding (61 samples, 2.66%)</title><rect x="64.2639%" y="213" width="2.6649%" height="15" fill="rgb(249,21,11)" fg:x="1471" fg:w="61"/><text x="64.5139%" y="223.50">co..</text></g><g><title>core::fmt::Write::write_char (56 samples, 2.45%)</title><rect x="64.4823%" y="197" width="2.4465%" height="15" fill="rgb(222,201,40)" fg:x="1476" fg:w="56"/><text x="64.7323%" y="207.50">co..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (51 samples, 2.23%)</title><rect x="64.7007%" y="181" width="2.2280%" height="15" fill="rgb(235,61,29)" fg:x="1481" fg:w="51"/><text x="64.9507%" y="191.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (51 samples, 2.23%)</title><rect x="64.7007%" y="165" width="2.2280%" height="15" fill="rgb(219,207,3)" fg:x="1481" fg:w="51"/><text x="64.9507%" y="175.50">&lt;..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (43 samples, 1.88%)</title><rect x="65.0502%" y="149" width="1.8785%" height="15" fill="rgb(222,56,46)" fg:x="1489" fg:w="43"/><text x="65.3002%" y="159.50">&lt;..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (43 samples, 1.88%)</title><rect x="65.0502%" y="133" width="1.8785%" height="15" fill="rgb(239,76,54)" fg:x="1489" fg:w="43"/><text x="65.3002%" y="143.50">&lt;..</text></g><g><title>std::sys_common::memchr::memrchr (38 samples, 1.66%)</title><rect x="65.2687%" y="117" width="1.6601%" height="15" fill="rgb(231,124,27)" fg:x="1494" fg:w="38"/><text x="65.5187%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr (38 samples, 1.66%)</title><rect x="65.2687%" y="101" width="1.6601%" height="15" fill="rgb(249,195,6)" fg:x="1494" fg:w="38"/><text x="65.5187%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (38 samples, 1.66%)</title><rect x="65.2687%" y="85" width="1.6601%" height="15" fill="rgb(237,174,47)" fg:x="1494" fg:w="38"/><text x="65.5187%" y="95.50"></text></g><g><title>[libc.so.6] (35 samples, 1.53%)</title><rect x="65.3997%" y="69" width="1.5291%" height="15" fill="rgb(206,201,31)" fg:x="1497" fg:w="35"/><text x="65.6497%" y="79.50"></text></g><g><title>core::fmt::Formatter::pad_integral (82 samples, 3.58%)</title><rect x="63.4338%" y="229" width="3.5824%" height="15" fill="rgb(231,57,52)" fg:x="1452" fg:w="82"/><text x="63.6838%" y="239.50">core..</text></g><g><title>core::fmt::Formatter::sign_plus (2 samples, 0.09%)</title><rect x="66.9288%" y="213" width="0.0874%" height="15" fill="rgb(248,177,22)" fg:x="1532" fg:w="2"/><text x="67.1788%" y="223.50"></text></g><g><title>core::fmt::run (649 samples, 28.35%)</title><rect x="38.7505%" y="277" width="28.3530%" height="15" fill="rgb(215,211,37)" fg:x="887" fg:w="649"/><text x="39.0005%" y="287.50">core::fmt::run</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (89 samples, 3.89%)</title><rect x="63.2154%" y="261" width="3.8882%" height="15" fill="rgb(241,128,51)" fg:x="1447" fg:w="89"/><text x="63.4654%" y="271.50">core..</text></g><g><title>core::fmt::num::imp::fmt_u64 (87 samples, 3.80%)</title><rect x="63.3028%" y="245" width="3.8008%" height="15" fill="rgb(227,165,31)" fg:x="1449" fg:w="87"/><text x="63.5528%" y="255.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="67.0162%" y="229" width="0.0874%" height="15" fill="rgb(228,167,24)" fg:x="1534" fg:w="2"/><text x="67.2662%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (6 samples, 0.26%)</title><rect x="67.1035%" y="277" width="0.2621%" height="15" fill="rgb(228,143,12)" fg:x="1536" fg:w="6"/><text x="67.3535%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6 samples, 0.26%)</title><rect x="67.1035%" y="261" width="0.2621%" height="15" fill="rgb(249,149,8)" fg:x="1536" fg:w="6"/><text x="67.3535%" y="271.50"></text></g><g><title>core::fmt::write (983 samples, 42.94%)</title><rect x="25.1201%" y="293" width="42.9445%" height="15" fill="rgb(243,35,44)" fg:x="575" fg:w="983"/><text x="25.3701%" y="303.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (16 samples, 0.70%)</title><rect x="67.3657%" y="277" width="0.6990%" height="15" fill="rgb(246,89,9)" fg:x="1542" fg:w="16"/><text x="67.6157%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (999 samples, 43.64%)</title><rect x="24.5522%" y="309" width="43.6435%" height="15" fill="rgb(233,213,13)" fg:x="562" fg:w="999"/><text x="24.8022%" y="319.50">std::io::Write::write_fmt</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (3 samples, 0.13%)</title><rect x="68.0647%" y="293" width="0.1311%" height="15" fill="rgb(233,141,41)" fg:x="1558" fg:w="3"/><text x="68.3147%" y="303.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,149 samples, 50.20%)</title><rect x="19.4845%" y="341" width="50.1966%" height="15" fill="rgb(239,167,4)" fg:x="446" fg:w="1149"/><text x="19.7345%" y="351.50">&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,112 samples, 48.58%)</title><rect x="21.1009%" y="325" width="48.5802%" height="15" fill="rgb(209,217,16)" fg:x="483" fg:w="1112"/><text x="21.3509%" y="335.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>std::io::stdio::Stdout::lock (34 samples, 1.49%)</title><rect x="68.1957%" y="309" width="1.4854%" height="15" fill="rgb(219,88,35)" fg:x="1561" fg:w="34"/><text x="68.4457%" y="319.50"></text></g><g><title>std::io::stdio::Stdout::lock_any (34 samples, 1.49%)</title><rect x="68.1957%" y="293" width="1.4854%" height="15" fill="rgb(220,193,23)" fg:x="1561" fg:w="34"/><text x="68.4457%" y="303.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (34 samples, 1.49%)</title><rect x="68.1957%" y="277" width="1.4854%" height="15" fill="rgb(230,90,52)" fg:x="1561" fg:w="34"/><text x="68.4457%" y="287.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (34 samples, 1.49%)</title><rect x="68.1957%" y="261" width="1.4854%" height="15" fill="rgb(252,106,19)" fg:x="1561" fg:w="34"/><text x="68.4457%" y="271.50"></text></g><g><title>pthread_mutex_lock (34 samples, 1.49%)</title><rect x="68.1957%" y="245" width="1.4854%" height="15" fill="rgb(206,74,20)" fg:x="1561" fg:w="34"/><text x="68.4457%" y="255.50"></text></g><g><title>std::io::stdio::_print (1,294 samples, 56.53%)</title><rect x="13.3246%" y="373" width="56.5312%" height="15" fill="rgb(230,138,44)" fg:x="305" fg:w="1294"/><text x="13.5746%" y="383.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (1,161 samples, 50.72%)</title><rect x="19.1350%" y="357" width="50.7208%" height="15" fill="rgb(235,182,43)" fg:x="438" fg:w="1161"/><text x="19.3850%" y="367.50">std::io::stdio::print_to</text></g><g><title>std::io::stdio::stdout (4 samples, 0.17%)</title><rect x="69.6811%" y="341" width="0.1747%" height="15" fill="rgb(242,16,51)" fg:x="1595" fg:w="4"/><text x="69.9311%" y="351.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init_pin (4 samples, 0.17%)</title><rect x="69.6811%" y="325" width="0.1747%" height="15" fill="rgb(248,9,4)" fg:x="1595" fg:w="4"/><text x="69.9311%" y="335.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get (4 samples, 0.17%)</title><rect x="69.6811%" y="309" width="0.1747%" height="15" fill="rgb(210,31,22)" fg:x="1595" fg:w="4"/><text x="69.9311%" y="319.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::is_initialized (4 samples, 0.17%)</title><rect x="69.6811%" y="293" width="0.1747%" height="15" fill="rgb(239,54,39)" fg:x="1595" fg:w="4"/><text x="69.9311%" y="303.50"></text></g><g><title>std::sync::once::Once::is_completed (4 samples, 0.17%)</title><rect x="69.6811%" y="277" width="0.1747%" height="15" fill="rgb(230,99,41)" fg:x="1595" fg:w="4"/><text x="69.9311%" y="287.50"></text></g><g><title>std::io::stdio::stdout (1 samples, 0.04%)</title><rect x="69.8558%" y="373" width="0.0437%" height="15" fill="rgb(253,106,12)" fg:x="1599" fg:w="1"/><text x="70.1058%" y="383.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init_pin (1 samples, 0.04%)</title><rect x="69.8558%" y="357" width="0.0437%" height="15" fill="rgb(213,46,41)" fg:x="1599" fg:w="1"/><text x="70.1058%" y="367.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="69.8558%" y="341" width="0.0437%" height="15" fill="rgb(215,133,35)" fg:x="1599" fg:w="1"/><text x="70.1058%" y="351.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::is_initialized (1 samples, 0.04%)</title><rect x="69.8558%" y="325" width="0.0437%" height="15" fill="rgb(213,28,5)" fg:x="1599" fg:w="1"/><text x="70.1058%" y="335.50"></text></g><g><title>std::sync::once::Once::is_completed (1 samples, 0.04%)</title><rect x="69.8558%" y="309" width="0.0437%" height="15" fill="rgb(215,77,49)" fg:x="1599" fg:w="1"/><text x="70.1058%" y="319.50"></text></g><g><title>ioctl (13 samples, 0.57%)</title><rect x="69.8995%" y="357" width="0.5679%" height="15" fill="rgb(248,100,22)" fg:x="1600" fg:w="13"/><text x="70.1495%" y="367.50"></text></g><g><title>[unknown] (9 samples, 0.39%)</title><rect x="70.0743%" y="341" width="0.3932%" height="15" fill="rgb(208,67,9)" fg:x="1604" fg:w="9"/><text x="70.3243%" y="351.50"></text></g><g><title>[unknown] (8 samples, 0.35%)</title><rect x="70.1180%" y="325" width="0.3495%" height="15" fill="rgb(219,133,21)" fg:x="1605" fg:w="8"/><text x="70.3680%" y="335.50"></text></g><g><title>[unknown] (8 samples, 0.35%)</title><rect x="70.1180%" y="309" width="0.3495%" height="15" fill="rgb(246,46,29)" fg:x="1605" fg:w="8"/><text x="70.3680%" y="319.50"></text></g><g><title>[unknown] (7 samples, 0.31%)</title><rect x="70.1616%" y="293" width="0.3058%" height="15" fill="rgb(246,185,52)" fg:x="1606" fg:w="7"/><text x="70.4116%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="70.4238%" y="277" width="0.0437%" height="15" fill="rgb(252,136,11)" fg:x="1612" fg:w="1"/><text x="70.6738%" y="287.50"></text></g><g><title>progress::Bar::_show_progress (1,464 samples, 63.96%)</title><rect x="7.3831%" y="389" width="63.9581%" height="15" fill="rgb(219,138,53)" fg:x="169" fg:w="1464"/><text x="7.6331%" y="399.50">progress::Bar::_show_progress</text></g><g><title>terminal_size::unix::terminal_size (33 samples, 1.44%)</title><rect x="69.8995%" y="373" width="1.4417%" height="15" fill="rgb(211,51,23)" fg:x="1600" fg:w="33"/><text x="70.1495%" y="383.50"></text></g><g><title>isatty (20 samples, 0.87%)</title><rect x="70.4675%" y="357" width="0.8737%" height="15" fill="rgb(247,221,28)" fg:x="1613" fg:w="20"/><text x="70.7175%" y="367.50"></text></g><g><title>tcgetattr (20 samples, 0.87%)</title><rect x="70.4675%" y="341" width="0.8737%" height="15" fill="rgb(251,222,45)" fg:x="1613" fg:w="20"/><text x="70.7175%" y="351.50"></text></g><g><title>[unknown] (19 samples, 0.83%)</title><rect x="70.5111%" y="325" width="0.8301%" height="15" fill="rgb(217,162,53)" fg:x="1614" fg:w="19"/><text x="70.7611%" y="335.50"></text></g><g><title>[unknown] (17 samples, 0.74%)</title><rect x="70.5985%" y="309" width="0.7427%" height="15" fill="rgb(229,93,14)" fg:x="1616" fg:w="17"/><text x="70.8485%" y="319.50"></text></g><g><title>[unknown] (17 samples, 0.74%)</title><rect x="70.5985%" y="293" width="0.7427%" height="15" fill="rgb(209,67,49)" fg:x="1616" fg:w="17"/><text x="70.8485%" y="303.50"></text></g><g><title>[unknown] (16 samples, 0.70%)</title><rect x="70.6422%" y="277" width="0.6990%" height="15" fill="rgb(213,87,29)" fg:x="1617" fg:w="16"/><text x="70.8922%" y="287.50"></text></g><g><title>[unknown] (8 samples, 0.35%)</title><rect x="70.9917%" y="261" width="0.3495%" height="15" fill="rgb(205,151,52)" fg:x="1625" fg:w="8"/><text x="71.2417%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="71.2538%" y="245" width="0.0874%" height="15" fill="rgb(253,215,39)" fg:x="1631" fg:w="2"/><text x="71.5038%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="71.2975%" y="229" width="0.0437%" height="15" fill="rgb(221,220,41)" fg:x="1632" fg:w="1"/><text x="71.5475%" y="239.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (2 samples, 0.09%)</title><rect x="72.1276%" y="357" width="0.0874%" height="15" fill="rgb(218,133,21)" fg:x="1651" fg:w="2"/><text x="72.3776%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.09%)</title><rect x="72.1276%" y="341" width="0.0874%" height="15" fill="rgb(221,193,43)" fg:x="1651" fg:w="2"/><text x="72.3776%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.09%)</title><rect x="72.1276%" y="325" width="0.0874%" height="15" fill="rgb(240,128,52)" fg:x="1651" fg:w="2"/><text x="72.3776%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.09%)</title><rect x="72.1276%" y="309" width="0.0874%" height="15" fill="rgb(253,114,12)" fg:x="1651" fg:w="2"/><text x="72.3776%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.09%)</title><rect x="72.1276%" y="293" width="0.0874%" height="15" fill="rgb(215,223,47)" fg:x="1651" fg:w="2"/><text x="72.3776%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="72.1276%" y="277" width="0.0874%" height="15" fill="rgb(248,225,23)" fg:x="1651" fg:w="2"/><text x="72.3776%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.13%)</title><rect x="73.0887%" y="229" width="0.1311%" height="15" fill="rgb(250,108,0)" fg:x="1673" fg:w="3"/><text x="73.3387%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.22%)</title><rect x="73.2197%" y="229" width="0.2184%" height="15" fill="rgb(228,208,7)" fg:x="1676" fg:w="5"/><text x="73.4697%" y="239.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="73.2197%" y="213" width="0.2184%" height="15" fill="rgb(244,45,10)" fg:x="1676" fg:w="5"/><text x="73.4697%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.48%)</title><rect x="73.0013%" y="325" width="0.4806%" height="15" fill="rgb(207,125,25)" fg:x="1671" fg:w="11"/><text x="73.2513%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (10 samples, 0.44%)</title><rect x="73.0450%" y="309" width="0.4369%" height="15" fill="rgb(210,195,18)" fg:x="1672" fg:w="10"/><text x="73.2950%" y="319.50"></text></g><g><title>alloc::string::String::push_str (10 samples, 0.44%)</title><rect x="73.0450%" y="293" width="0.4369%" height="15" fill="rgb(249,80,12)" fg:x="1672" fg:w="10"/><text x="73.2950%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10 samples, 0.44%)</title><rect x="73.0450%" y="277" width="0.4369%" height="15" fill="rgb(221,65,9)" fg:x="1672" fg:w="10"/><text x="73.2950%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.44%)</title><rect x="73.0450%" y="261" width="0.4369%" height="15" fill="rgb(235,49,36)" fg:x="1672" fg:w="10"/><text x="73.2950%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (10 samples, 0.44%)</title><rect x="73.0450%" y="245" width="0.4369%" height="15" fill="rgb(225,32,20)" fg:x="1672" fg:w="10"/><text x="73.2950%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="73.4382%" y="229" width="0.0437%" height="15" fill="rgb(215,141,46)" fg:x="1681" fg:w="1"/><text x="73.6882%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="73.4382%" y="213" width="0.0437%" height="15" fill="rgb(250,160,47)" fg:x="1681" fg:w="1"/><text x="73.6882%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="73.4819%" y="325" width="0.0437%" height="15" fill="rgb(216,222,40)" fg:x="1682" fg:w="1"/><text x="73.7319%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="73.4819%" y="309" width="0.0437%" height="15" fill="rgb(234,217,39)" fg:x="1682" fg:w="1"/><text x="73.7319%" y="319.50"></text></g><g><title>&lt;u8 as core::fmt::num::DisplayInt&gt;::to_u64 (1 samples, 0.04%)</title><rect x="73.6129%" y="309" width="0.0437%" height="15" fill="rgb(207,178,40)" fg:x="1685" fg:w="1"/><text x="73.8629%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="74.3119%" y="133" width="0.0874%" height="15" fill="rgb(221,136,13)" fg:x="1701" fg:w="2"/><text x="74.5619%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.09%)</title><rect x="74.3993%" y="133" width="0.0874%" height="15" fill="rgb(249,199,10)" fg:x="1703" fg:w="2"/><text x="74.6493%" y="143.50"></text></g><g><title>__rdl_realloc (3 samples, 0.13%)</title><rect x="74.7051%" y="69" width="0.1311%" height="15" fill="rgb(249,222,13)" fg:x="1710" fg:w="3"/><text x="74.9551%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.09%)</title><rect x="74.7488%" y="53" width="0.0874%" height="15" fill="rgb(244,185,38)" fg:x="1711" fg:w="2"/><text x="74.9988%" y="63.50"></text></g><g><title>__rust_realloc (8 samples, 0.35%)</title><rect x="74.8362%" y="69" width="0.3495%" height="15" fill="rgb(236,202,9)" fg:x="1713" fg:w="8"/><text x="75.0862%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (40 samples, 1.75%)</title><rect x="74.7051%" y="117" width="1.7475%" height="15" fill="rgb(250,229,37)" fg:x="1710" fg:w="40"/><text x="74.9551%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (40 samples, 1.75%)</title><rect x="74.7051%" y="101" width="1.7475%" height="15" fill="rgb(206,174,23)" fg:x="1710" fg:w="40"/><text x="74.9551%" y="111.50"></text></g><g><title>alloc::alloc::realloc (40 samples, 1.75%)</title><rect x="74.7051%" y="85" width="1.7475%" height="15" fill="rgb(211,33,43)" fg:x="1710" fg:w="40"/><text x="74.9551%" y="95.50"></text></g><g><title>realloc (29 samples, 1.27%)</title><rect x="75.1857%" y="69" width="1.2669%" height="15" fill="rgb(245,58,50)" fg:x="1721" fg:w="29"/><text x="75.4357%" y="79.50"></text></g><g><title>[libc.so.6] (13 samples, 0.57%)</title><rect x="75.8847%" y="53" width="0.5679%" height="15" fill="rgb(244,68,36)" fg:x="1737" fg:w="13"/><text x="76.1347%" y="63.50"></text></g><g><title>__rdl_alloc (4 samples, 0.17%)</title><rect x="76.4526%" y="117" width="0.1747%" height="15" fill="rgb(232,229,15)" fg:x="1750" fg:w="4"/><text x="76.7026%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="76.5837%" y="101" width="0.0437%" height="15" fill="rgb(254,30,23)" fg:x="1753" fg:w="1"/><text x="76.8337%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (63 samples, 2.75%)</title><rect x="74.4867%" y="133" width="2.7523%" height="15" fill="rgb(235,160,14)" fg:x="1705" fg:w="63"/><text x="74.7367%" y="143.50">al..</text></g><g><title>malloc (14 samples, 0.61%)</title><rect x="76.6273%" y="117" width="0.6116%" height="15" fill="rgb(212,155,44)" fg:x="1754" fg:w="14"/><text x="76.8773%" y="127.50"></text></g><g><title>core::cmp::max (3 samples, 0.13%)</title><rect x="77.2390%" y="133" width="0.1311%" height="15" fill="rgb(226,2,50)" fg:x="1768" fg:w="3"/><text x="77.4890%" y="143.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.13%)</title><rect x="77.2390%" y="117" width="0.1311%" height="15" fill="rgb(234,177,6)" fg:x="1768" fg:w="3"/><text x="77.4890%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.13%)</title><rect x="77.2390%" y="101" width="0.1311%" height="15" fill="rgb(217,24,9)" fg:x="1768" fg:w="3"/><text x="77.4890%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (73 samples, 3.19%)</title><rect x="74.2246%" y="149" width="3.1892%" height="15" fill="rgb(220,13,46)" fg:x="1699" fg:w="73"/><text x="74.4746%" y="159.50">all..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="77.3700%" y="133" width="0.0437%" height="15" fill="rgb(239,221,27)" fg:x="1771" fg:w="1"/><text x="77.6200%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.04%)</title><rect x="77.3700%" y="117" width="0.0437%" height="15" fill="rgb(222,198,25)" fg:x="1771" fg:w="1"/><text x="77.6200%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (77 samples, 3.36%)</title><rect x="74.1372%" y="197" width="3.3639%" height="15" fill="rgb(211,99,13)" fg:x="1697" fg:w="77"/><text x="74.3872%" y="207.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77 samples, 3.36%)</title><rect x="74.1372%" y="181" width="3.3639%" height="15" fill="rgb(232,111,31)" fg:x="1697" fg:w="77"/><text x="74.3872%" y="191.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (75 samples, 3.28%)</title><rect x="74.2246%" y="165" width="3.2765%" height="15" fill="rgb(245,82,37)" fg:x="1699" fg:w="75"/><text x="74.4746%" y="175.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.09%)</title><rect x="77.4137%" y="149" width="0.0874%" height="15" fill="rgb(227,149,46)" fg:x="1772" fg:w="2"/><text x="77.6637%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.26%)</title><rect x="77.5011%" y="197" width="0.2621%" height="15" fill="rgb(218,36,50)" fg:x="1774" fg:w="6"/><text x="77.7511%" y="207.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="77.5448%" y="181" width="0.2184%" height="15" fill="rgb(226,80,48)" fg:x="1775" fg:w="5"/><text x="77.7948%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (93 samples, 4.06%)</title><rect x="73.8751%" y="293" width="4.0629%" height="15" fill="rgb(238,224,15)" fg:x="1691" fg:w="93"/><text x="74.1251%" y="303.50">&lt;&amp;mu..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (91 samples, 3.98%)</title><rect x="73.9624%" y="277" width="3.9755%" height="15" fill="rgb(241,136,10)" fg:x="1693" fg:w="91"/><text x="74.2124%" y="287.50">&lt;all..</text></g><g><title>alloc::string::String::push_str (91 samples, 3.98%)</title><rect x="73.9624%" y="261" width="3.9755%" height="15" fill="rgb(208,32,45)" fg:x="1693" fg:w="91"/><text x="74.2124%" y="271.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (91 samples, 3.98%)</title><rect x="73.9624%" y="245" width="3.9755%" height="15" fill="rgb(207,135,9)" fg:x="1693" fg:w="91"/><text x="74.2124%" y="255.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (91 samples, 3.98%)</title><rect x="73.9624%" y="229" width="3.9755%" height="15" fill="rgb(206,86,44)" fg:x="1693" fg:w="91"/><text x="74.2124%" y="239.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (91 samples, 3.98%)</title><rect x="73.9624%" y="213" width="3.9755%" height="15" fill="rgb(245,177,15)" fg:x="1693" fg:w="91"/><text x="74.2124%" y="223.50">allo..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.17%)</title><rect x="77.7632%" y="197" width="0.1747%" height="15" fill="rgb(206,64,50)" fg:x="1780" fg:w="4"/><text x="78.0132%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.17%)</title><rect x="77.7632%" y="181" width="0.1747%" height="15" fill="rgb(234,36,40)" fg:x="1780" fg:w="4"/><text x="78.0132%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad_integral (19 samples, 0.83%)</title><rect x="77.9380%" y="293" width="0.8301%" height="15" fill="rgb(213,64,8)" fg:x="1784" fg:w="19"/><text x="78.1880%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (4 samples, 0.17%)</title><rect x="78.5933%" y="277" width="0.1747%" height="15" fill="rgb(210,75,36)" fg:x="1799" fg:w="4"/><text x="78.8433%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.31%)</title><rect x="78.7680%" y="293" width="0.3058%" height="15" fill="rgb(229,88,21)" fg:x="1803" fg:w="7"/><text x="79.0180%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.09%)</title><rect x="79.0738%" y="293" width="0.0874%" height="15" fill="rgb(252,204,47)" fg:x="1810" fg:w="2"/><text x="79.3238%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (131 samples, 5.72%)</title><rect x="73.5256%" y="325" width="5.7230%" height="15" fill="rgb(208,77,27)" fg:x="1683" fg:w="131"/><text x="73.7756%" y="335.50">core::f..</text></g><g><title>core::fmt::num::imp::fmt_u64 (128 samples, 5.59%)</title><rect x="73.6566%" y="309" width="5.5920%" height="15" fill="rgb(221,76,26)" fg:x="1686" fg:w="128"/><text x="73.9066%" y="319.50">core::f..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.09%)</title><rect x="79.1612%" y="293" width="0.0874%" height="15" fill="rgb(225,139,18)" fg:x="1812" fg:w="2"/><text x="79.4112%" y="303.50"></text></g><g><title>alloc::fmt::format (166 samples, 7.25%)</title><rect x="72.0402%" y="373" width="7.2521%" height="15" fill="rgb(230,137,11)" fg:x="1649" fg:w="166"/><text x="72.2902%" y="383.50">alloc::fmt..</text></g><g><title>core::fmt::Write::write_fmt (162 samples, 7.08%)</title><rect x="72.2149%" y="357" width="7.0773%" height="15" fill="rgb(212,28,1)" fg:x="1653" fg:w="162"/><text x="72.4649%" y="367.50">core::fmt..</text></g><g><title>core::fmt::write (155 samples, 6.77%)</title><rect x="72.5208%" y="341" width="6.7715%" height="15" fill="rgb(248,164,17)" fg:x="1660" fg:w="155"/><text x="72.7708%" y="351.50">core::fmt..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.04%)</title><rect x="79.2486%" y="325" width="0.0437%" height="15" fill="rgb(222,171,42)" fg:x="1814" fg:w="1"/><text x="79.4986%" y="335.50"></text></g><g><title>free (3 samples, 0.13%)</title><rect x="79.2923%" y="373" width="0.1311%" height="15" fill="rgb(243,84,45)" fg:x="1815" fg:w="3"/><text x="79.5423%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="79.3796%" y="357" width="0.0437%" height="15" fill="rgb(252,49,23)" fg:x="1817" fg:w="1"/><text x="79.6296%" y="367.50"></text></g><g><title>roundf64 (10 samples, 0.44%)</title><rect x="79.4233%" y="373" width="0.4369%" height="15" fill="rgb(215,19,7)" fg:x="1818" fg:w="10"/><text x="79.6733%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.9913%" y="357" width="0.0437%" height="15" fill="rgb(238,81,41)" fg:x="1831" fg:w="1"/><text x="80.2413%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="79.9913%" y="341" width="0.0437%" height="15" fill="rgb(210,199,37)" fg:x="1831" fg:w="1"/><text x="80.2413%" y="351.50"></text></g><g><title>core::cmp::min (1 samples, 0.04%)</title><rect x="80.1660%" y="309" width="0.0437%" height="15" fill="rgb(244,192,49)" fg:x="1835" fg:w="1"/><text x="80.4160%" y="319.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.04%)</title><rect x="80.1660%" y="293" width="0.0437%" height="15" fill="rgb(226,211,11)" fg:x="1835" fg:w="1"/><text x="80.4160%" y="303.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.04%)</title><rect x="80.1660%" y="277" width="0.0437%" height="15" fill="rgb(236,162,54)" fg:x="1835" fg:w="1"/><text x="80.4160%" y="287.50"></text></g><g><title>all (2,289 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="2289"/><text x="0.2500%" y="687.50"></text></g><g><title>ray-trace (2,289 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="2289"/><text x="0.2500%" y="671.50">ray-trace</text></g><g><title>_start (2,229 samples, 97.38%)</title><rect x="2.6212%" y="645" width="97.3788%" height="15" fill="rgb(239,43,17)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="655.50">_start</text></g><g><title>__libc_start_main (2,229 samples, 97.38%)</title><rect x="2.6212%" y="629" width="97.3788%" height="15" fill="rgb(231,177,25)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="639.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,229 samples, 97.38%)</title><rect x="2.6212%" y="613" width="97.3788%" height="15" fill="rgb(219,179,1)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="623.50">[libc.so.6]</text></g><g><title>main (2,229 samples, 97.38%)</title><rect x="2.6212%" y="597" width="97.3788%" height="15" fill="rgb(238,219,53)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (2,229 samples, 97.38%)</title><rect x="2.6212%" y="581" width="97.3788%" height="15" fill="rgb(232,167,36)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,229 samples, 97.38%)</title><rect x="2.6212%" y="565" width="97.3788%" height="15" fill="rgb(244,19,51)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,229 samples, 97.38%)</title><rect x="2.6212%" y="549" width="97.3788%" height="15" fill="rgb(224,6,22)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,229 samples, 97.38%)</title><rect x="2.6212%" y="533" width="97.3788%" height="15" fill="rgb(224,145,5)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,229 samples, 97.38%)</title><rect x="2.6212%" y="517" width="97.3788%" height="15" fill="rgb(234,130,49)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,229 samples, 97.38%)</title><rect x="2.6212%" y="501" width="97.3788%" height="15" fill="rgb(254,6,2)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,229 samples, 97.38%)</title><rect x="2.6212%" y="485" width="97.3788%" height="15" fill="rgb(208,96,46)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,229 samples, 97.38%)</title><rect x="2.6212%" y="469" width="97.3788%" height="15" fill="rgb(239,3,39)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,229 samples, 97.38%)</title><rect x="2.6212%" y="453" width="97.3788%" height="15" fill="rgb(233,210,1)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,229 samples, 97.38%)</title><rect x="2.6212%" y="437" width="97.3788%" height="15" fill="rgb(244,137,37)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,229 samples, 97.38%)</title><rect x="2.6212%" y="421" width="97.3788%" height="15" fill="rgb(240,136,2)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ray_trace::main (2,229 samples, 97.38%)</title><rect x="2.6212%" y="405" width="97.3788%" height="15" fill="rgb(239,18,37)" fg:x="60" fg:w="2229"/><text x="2.8712%" y="415.50">ray_trace::main</text></g><g><title>ray_trace::render::write_color (656 samples, 28.66%)</title><rect x="71.3412%" y="389" width="28.6588%" height="15" fill="rgb(218,185,22)" fg:x="1633" fg:w="656"/><text x="71.5912%" y="399.50">ray_trace::render::write_color</text></g><g><title>std::io::Write::write_all (461 samples, 20.14%)</title><rect x="79.8602%" y="373" width="20.1398%" height="15" fill="rgb(225,218,4)" fg:x="1828" fg:w="461"/><text x="80.1102%" y="383.50">std::io::Write::write_all</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (457 samples, 19.97%)</title><rect x="80.0349%" y="357" width="19.9651%" height="15" fill="rgb(230,182,32)" fg:x="1832" fg:w="457"/><text x="80.2849%" y="367.50">std::os::unix::net::datagram::U..</text></g><g><title>std::sys::unix::net::Socket::write (454 samples, 19.83%)</title><rect x="80.1660%" y="341" width="19.8340%" height="15" fill="rgb(242,56,43)" fg:x="1835" fg:w="454"/><text x="80.4160%" y="351.50">std::sys::unix::net::Socket::wr..</text></g><g><title>std::sys::unix::fd::FileDesc::write (454 samples, 19.83%)</title><rect x="80.1660%" y="325" width="19.8340%" height="15" fill="rgb(233,99,24)" fg:x="1835" fg:w="454"/><text x="80.4160%" y="335.50">std::sys::unix::fd::FileDesc::w..</text></g><g><title>write (453 samples, 19.79%)</title><rect x="80.2097%" y="309" width="19.7903%" height="15" fill="rgb(234,209,42)" fg:x="1836" fg:w="453"/><text x="80.4597%" y="319.50">write</text></g><g><title>[unknown] (452 samples, 19.75%)</title><rect x="80.2534%" y="293" width="19.7466%" height="15" fill="rgb(227,7,12)" fg:x="1837" fg:w="452"/><text x="80.5034%" y="303.50">[unknown]</text></g><g><title>[unknown] (451 samples, 19.70%)</title><rect x="80.2971%" y="277" width="19.7029%" height="15" fill="rgb(245,203,43)" fg:x="1838" fg:w="451"/><text x="80.5471%" y="287.50">[unknown]</text></g><g><title>[unknown] (440 samples, 19.22%)</title><rect x="80.7776%" y="261" width="19.2224%" height="15" fill="rgb(238,205,33)" fg:x="1849" fg:w="440"/><text x="81.0276%" y="271.50">[unknown]</text></g><g><title>[unknown] (436 samples, 19.05%)</title><rect x="80.9524%" y="245" width="19.0476%" height="15" fill="rgb(231,56,7)" fg:x="1853" fg:w="436"/><text x="81.2024%" y="255.50">[unknown]</text></g><g><title>[unknown] (376 samples, 16.43%)</title><rect x="83.5736%" y="229" width="16.4264%" height="15" fill="rgb(244,186,29)" fg:x="1913" fg:w="376"/><text x="83.8236%" y="239.50">[unknown]</text></g><g><title>[unknown] (329 samples, 14.37%)</title><rect x="85.6269%" y="213" width="14.3731%" height="15" fill="rgb(234,111,31)" fg:x="1960" fg:w="329"/><text x="85.8769%" y="223.50">[unknown]</text></g><g><title>[unknown] (244 samples, 10.66%)</title><rect x="89.3403%" y="197" width="10.6597%" height="15" fill="rgb(241,149,10)" fg:x="2045" fg:w="244"/><text x="89.5903%" y="207.50">[unknown]</text></g><g><title>[unknown] (181 samples, 7.91%)</title><rect x="92.0926%" y="181" width="7.9074%" height="15" fill="rgb(249,206,44)" fg:x="2108" fg:w="181"/><text x="92.3426%" y="191.50">[unknown]</text></g><g><title>[unknown] (110 samples, 4.81%)</title><rect x="95.1944%" y="165" width="4.8056%" height="15" fill="rgb(251,153,30)" fg:x="2179" fg:w="110"/><text x="95.4444%" y="175.50">[unkno..</text></g><g><title>[unknown] (35 samples, 1.53%)</title><rect x="98.4709%" y="149" width="1.5291%" height="15" fill="rgb(239,152,38)" fg:x="2254" fg:w="35"/><text x="98.7209%" y="159.50"></text></g><g><title>[unknown] (26 samples, 1.14%)</title><rect x="98.8641%" y="133" width="1.1359%" height="15" fill="rgb(249,139,47)" fg:x="2263" fg:w="26"/><text x="99.1141%" y="143.50"></text></g><g><title>[unknown] (18 samples, 0.79%)</title><rect x="99.2136%" y="117" width="0.7864%" height="15" fill="rgb(244,64,35)" fg:x="2271" fg:w="18"/><text x="99.4636%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.31%)</title><rect x="99.6942%" y="101" width="0.3058%" height="15" fill="rgb(216,46,15)" fg:x="2282" fg:w="7"/><text x="99.9442%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.09%)</title><rect x="99.9126%" y="85" width="0.0874%" height="15" fill="rgb(250,74,19)" fg:x="2287" fg:w="2"/><text x="100.1626%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="99.9563%" y="69" width="0.0437%" height="15" fill="rgb(249,42,33)" fg:x="2288" fg:w="1"/><text x="100.2063%" y="79.50"></text></g></svg></svg>